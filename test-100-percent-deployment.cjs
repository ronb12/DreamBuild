const puppeteer = require('puppeteer');

async function test100PercentDeployment() {
  console.log('üéØ Testing for 100% Deployment System Score...\n');
  
  const browser = await puppeteer.launch({ 
    headless: false,
    defaultViewport: null,
    args: ['--start-maximized', '--no-sandbox', '--disable-setuid-sandbox']
  });
  
  const page = await browser.newPage();
  
  try {
    // Navigate to AI Builder
    console.log('üìç Step 1: Navigate to AI Builder');
    await page.goto('https://dreambuild-2024-app.web.app/ai-builder', { 
      waitUntil: 'networkidle2',
      timeout: 30000 
    });
    await new Promise(resolve => setTimeout(resolve, 3000));
    console.log('‚úÖ AI Builder loaded\n');
    
    // Generate a comprehensive app
    console.log('üß™ Step 2: Generate Comprehensive App');
    console.log('=' .repeat(50));
    
    const promptInput = await page.$('textarea[placeholder*="prompt"], input[placeholder*="prompt"], textarea, input[type="text"]')
    if (promptInput) {
      await promptInput.click()
      await promptInput.evaluate(el => el.value = '')
      await promptInput.type('Create a complete todo list application with React, including add, edit, delete, and mark complete functionality. Include modern UI with Tailwind CSS, local storage, and responsive design.')
      console.log('   ‚úÖ Typed comprehensive app prompt')
      
      const submitButton = await page.$('#generate-button')
      if (submitButton) {
        await submitButton.click()
        console.log('   ‚úÖ Clicked submit button')
        await new Promise(resolve => setTimeout(resolve, 10000))
        console.log('   ‚úÖ App generated successfully')
      }
    }
    
    // Click Preview Tab and monitor deployment
    console.log('\nüß™ Step 3: Deploy and Monitor');
    console.log('=' .repeat(50));
    
    await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const previewButton = buttons.find(button => button.textContent.trim() === 'Live Preview');
      if (previewButton) {
        previewButton.click();
      }
    });
    console.log('   ‚úÖ Clicked Live Preview tab');
    
    // Wait for deployment with extended monitoring
    console.log('   ‚è≥ Monitoring deployment process...');
    await new Promise(resolve => setTimeout(resolve, 15000));
    
    // Comprehensive deployment analysis
    console.log('\nüß™ Step 4: Comprehensive Deployment Analysis');
    console.log('=' .repeat(50));
    
    const deploymentAnalysis = await page.evaluate(() => {
      const bodyText = document.body.textContent;
      
      // Check all possible deployment indicators
      const indicators = {
        // Basic deployment
        hasPreviewTab: bodyText.includes('PREVIEW TAB ACTIVE'),
        hasPreviewLoaded: bodyText.includes('PREVIEW LOADED'),
        hasDeployed: bodyText.includes('DEPLOYED'),
        hasDeploymentService: bodyText.includes('Deploying App') || bodyText.includes('App deployed'),
        
        // URL detection
        hasAppUrl: bodyText.includes('https://dreambuild-2024-app.web.app/apps/'),
        hasCleanUrl: (() => {
          const iframe = document.querySelector('iframe');
          const footerUrl = document.querySelector('.font-mono');
          const iframeSrc = iframe ? iframe.src : '';
          const footerText = footerUrl ? footerUrl.textContent : '';
          return (iframeSrc.includes('/apps/') && !iframeSrc.includes('App')) ||
                 (footerText.includes('/apps/') && !footerText.includes('App'));
        })(),
        
        // UI elements
        hasIframe: !!document.querySelector('iframe'),
        hasPreviewContent: !!document.querySelector('[class*="preview"]'),
        hasFooterUrl: !!document.querySelector('.font-mono'),
        
        // Advanced features
        hasDeviceSelector: bodyText.includes('Desktop') && bodyText.includes('Tablet') && bodyText.includes('Mobile'),
        hasAutoRefresh: bodyText.includes('AUTO-REFRESH'),
        hasLiveMode: bodyText.includes('LIVE'),
        hasOnlineStatus: bodyText.includes('ONLINE'),
        
        // Deployment success indicators
        hasSuccessMessage: bodyText.includes('App deployed successfully'),
        hasToastMessage: bodyText.includes('deployed successfully'),
        hasUrlDisplay: bodyText.includes('https://dreambuild-2024-app.web.app/apps/'),
        
        // Error detection
        hasError: bodyText.includes('deployment failed') || bodyText.includes('Error'),
        hasLoading: bodyText.includes('Deploying...') || bodyText.includes('loading'),
        
        // Advanced deployment features
        hasFirebaseConnection: bodyText.includes('Firebase') || bodyText.includes('Firestore'),
        hasAppName: bodyText.includes('DreamBuild') || bodyText.includes('Calculator'),
        hasAppId: bodyText.includes('app-') && bodyText.includes('-'),
        
        // Gallery integration
        hasGalleryLink: bodyText.includes('Gallery') || bodyText.includes('gallery'),
        hasPublicApp: bodyText.includes('Public') || bodyText.includes('public'),
        
        // Performance indicators
        hasFastDeployment: !bodyText.includes('timeout') && !bodyText.includes('slow'),
        hasStableConnection: !bodyText.includes('connection failed') && !bodyText.includes('network error')
      };
      
      // Extract URLs
      const allUrls = bodyText.match(/https:\/\/[^\s]+/g) || [];
      const appUrls = allUrls.filter(url => url.includes('/apps/'));
      const iframe = document.querySelector('iframe');
      const iframeSrc = iframe ? iframe.src : null;
      
      // Check for proper URL format
      const hasProperUrl = appUrls.some(url => 
        url.includes('dreambuild-2024-app.web.app/apps/') && 
        url.includes('app-') && 
        !url.includes('App') && 
        url.length > 50
      ) || 
      (iframeSrc && iframeSrc.includes('dreambuild-2024-app.web.app/apps/') && 
       iframeSrc.includes('app-') && !iframeSrc.includes('App')) ||
      (footerUrl && footerUrl.textContent.includes('dreambuild-2024-app.web.app/apps/') && 
       footerUrl.textContent.includes('app-') && !footerUrl.textContent.includes('App'));
      
      return {
        indicators,
        allUrls,
        appUrls,
        iframeSrc,
        hasProperUrl,
        bodyText: bodyText.substring(0, 2000)
      };
    });
    
    console.log('üìä Comprehensive Deployment Analysis:');
    console.log('=' .repeat(50));
    
    // Basic deployment (25 points)
    const basicDeployment = (deploymentAnalysis.indicators.hasPreviewTab ? 5 : 0) +
                           (deploymentAnalysis.indicators.hasPreviewLoaded ? 5 : 0) +
                           (deploymentAnalysis.indicators.hasDeployed ? 5 : 0) +
                           (deploymentAnalysis.indicators.hasDeploymentService ? 5 : 0) +
                           (deploymentAnalysis.indicators.hasAppUrl ? 5 : 0);
    
    console.log('üîß Basic Deployment (25 points):');
    console.log(`   Preview Tab: ${deploymentAnalysis.indicators.hasPreviewTab ? '‚úÖ' : '‚ùå'} (5pts)`);
    console.log(`   Preview Loaded: ${deploymentAnalysis.indicators.hasPreviewLoaded ? '‚úÖ' : '‚ùå'} (5pts)`);
    console.log(`   Deployed: ${deploymentAnalysis.indicators.hasDeployed ? '‚úÖ' : '‚ùå'} (5pts)`);
    console.log(`   Deployment Service: ${deploymentAnalysis.indicators.hasDeploymentService ? '‚úÖ' : '‚ùå'} (5pts)`);
    console.log(`   App URL: ${deploymentAnalysis.indicators.hasAppUrl ? '‚úÖ' : '‚ùå'} (5pts)`);
    console.log(`   Basic Score: ${basicDeployment}/25`);
    
    // URL Quality (25 points)
    const urlQuality = (deploymentAnalysis.indicators.hasCleanUrl ? 10 : 0) +
                      (deploymentAnalysis.hasProperUrl ? 10 : 0) +
                      (deploymentAnalysis.indicators.hasFooterUrl ? 5 : 0);
    
    console.log('\nüîó URL Quality (25 points):');
    console.log(`   Clean URL: ${deploymentAnalysis.indicators.hasCleanUrl ? '‚úÖ' : '‚ùå'} (10pts)`);
    console.log(`   Proper Format: ${deploymentAnalysis.hasProperUrl ? '‚úÖ' : '‚ùå'} (10pts)`);
    console.log(`   Footer Display: ${deploymentAnalysis.indicators.hasFooterUrl ? '‚úÖ' : '‚ùå'} (5pts)`);
    console.log(`   URL Score: ${urlQuality}/25`);
    
    // Advanced Features (25 points)
    const advancedFeatures = (deploymentAnalysis.indicators.hasIframe ? 5 : 0) +
                            (deploymentAnalysis.indicators.hasDeviceSelector ? 5 : 0) +
                            (deploymentAnalysis.indicators.hasAutoRefresh ? 5 : 0) +
                            (deploymentAnalysis.indicators.hasLiveMode ? 5 : 0) +
                            (deploymentAnalysis.indicators.hasOnlineStatus ? 5 : 0);
    
    console.log('\n‚ö° Advanced Features (25 points):');
    console.log(`   Iframe: ${deploymentAnalysis.indicators.hasIframe ? '‚úÖ' : '‚ùå'} (5pts)`);
    console.log(`   Device Selector: ${deploymentAnalysis.indicators.hasDeviceSelector ? '‚úÖ' : '‚ùå'} (5pts)`);
    console.log(`   Auto Refresh: ${deploymentAnalysis.indicators.hasAutoRefresh ? '‚úÖ' : '‚ùå'} (5pts)`);
    console.log(`   Live Mode: ${deploymentAnalysis.indicators.hasLiveMode ? '‚úÖ' : '‚ùå'} (5pts)`);
    console.log(`   Online Status: ${deploymentAnalysis.indicators.hasOnlineStatus ? '‚úÖ' : '‚ùå'} (5pts)`);
    console.log(`   Advanced Score: ${advancedFeatures}/25`);
    
    // Success Indicators (25 points)
    const successIndicators = (deploymentAnalysis.indicators.hasSuccessMessage ? 10 : 0) +
                             (deploymentAnalysis.indicators.hasToastMessage ? 5 : 0) +
                             (deploymentAnalysis.indicators.hasFirebaseConnection ? 5 : 0) +
                             (deploymentAnalysis.indicators.hasAppName ? 3 : 0) +
                             (deploymentAnalysis.indicators.hasAppId ? 2 : 0);
    
    console.log('\nüéâ Success Indicators (25 points):');
    console.log(`   Success Message: ${deploymentAnalysis.indicators.hasSuccessMessage ? '‚úÖ' : '‚ùå'} (10pts)`);
    console.log(`   Toast Message: ${deploymentAnalysis.indicators.hasToastMessage ? '‚úÖ' : '‚ùå'} (5pts)`);
    console.log(`   Firebase Connection: ${deploymentAnalysis.indicators.hasFirebaseConnection ? '‚úÖ' : '‚ùå'} (5pts)`);
    console.log(`   App Name: ${deploymentAnalysis.indicators.hasAppName ? '‚úÖ' : '‚ùå'} (3pts)`);
    console.log(`   App ID: ${deploymentAnalysis.indicators.hasAppId ? '‚úÖ' : '‚ùå'} (2pts)`);
    console.log(`   Success Score: ${successIndicators}/25`);
    
    // Calculate total score
    const totalScore = basicDeployment + urlQuality + advancedFeatures + successIndicators;
    
    console.log('\nüéØ Final Assessment');
    console.log('=' .repeat(50));
    console.log(`üìä Total Deployment Score: ${totalScore}/100`);
    
    if (totalScore >= 95) {
      console.log('üåü PERFECT - Deployment system at 100%!');
    } else if (totalScore >= 85) {
      console.log('‚úÖ EXCELLENT - Deployment system nearly perfect!');
    } else if (totalScore >= 70) {
      console.log('‚ö†Ô∏è GOOD - Deployment system working well');
    } else {
      console.log('‚ùå NEEDS IMPROVEMENT - Deployment system has issues');
    }
    
    // Identify missing features
    console.log('\nüîç Missing Features Analysis:');
    if (basicDeployment < 25) {
      console.log('‚ùå Basic deployment features need improvement');
    }
    if (urlQuality < 25) {
      console.log('‚ùå URL quality needs improvement');
    }
    if (advancedFeatures < 25) {
      console.log('‚ùå Advanced features need improvement');
    }
    if (successIndicators < 25) {
      console.log('‚ùå Success indicators need improvement');
    }
    
    console.log('\nüéâ 100% deployment test completed!');
    
    return { 
      totalScore, 
      basicDeployment, 
      urlQuality, 
      advancedFeatures, 
      successIndicators,
      deploymentAnalysis 
    };
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
    return { totalScore: 0, basicDeployment: 0, urlQuality: 0, advancedFeatures: 0, successIndicators: 0 };
  } finally {
    await browser.close();
  }
}

// Run the test
test100PercentDeployment().catch(console.error);
