{"version":3,"mappings":"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","names":["TemplateBasedGenerator","AICustomizationService","TemplateMatcher","localAIService","__vitePreload","n","categories","categoryKey","categoryData","templates","template","prompt","context","selectedTemplate","baseApp","customizedApp","error","startTime","matches","customizations","filename","content","files","feature","id","category","query","results","searchTerm","_a","_b","tag","cat","colorMatch","featureKeywords","keyword","customizedContent","color","colorMap","primaryColor","features","promptLower","score","tagMatches","a","b"],"ignoreList":[],"sources":["../../src/services/templateBasedGenerator.js"],"sourcesContent":["// Template-Based Generator Service\n// Primary architecture for DreamBuild - Template-First with AI Enhancement\n\nclass TemplateBasedGenerator {\n  constructor() {\n    this.templates = new Map();\n    this.categories = new Map();\n    this.aiEnhancer = null;\n    this.templateMatcher = null;\n    \n    // Initialize the system\n    this.initialize();\n  }\n\n  async initialize() {\n    console.log('🚀 Initializing Template-Based Generator...');\n    \n    // Load all templates\n    await this.loadAllTemplates();\n    \n    // Initialize AI enhancer\n    this.aiEnhancer = new AICustomizationService();\n    \n    // Initialize template matcher\n    this.templateMatcher = new TemplateMatcher(this.templates);\n    \n    console.log(`✅ Template-Based Generator initialized with ${this.templates.size} templates`);\n  }\n\n  async loadAllTemplates() {\n    // Load templates from the existing localAIService\n    const { default: localAIService } = await import('./localAIService.js');\n    \n    // Get all template categories\n    const categories = localAIService.getTemplateCategories();\n    \n    // Load templates from each category\n    for (const [categoryKey, categoryData] of Object.entries(categories)) {\n      this.categories.set(categoryKey, categoryData);\n      \n      // Generate templates for this category\n      const templates = categoryData.templates;\n      if (Array.isArray(templates)) {\n        templates.forEach(template => {\n          this.templates.set(template.id, {\n            ...template,\n            category: categoryKey,\n            categoryName: categoryData.name,\n            icon: categoryData.icon\n          });\n        });\n      }\n    }\n    \n    console.log(`📚 Loaded ${this.templates.size} templates across ${this.categories.size} categories`);\n  }\n\n  // Main generation method - Template-First approach\n  async generateApp(prompt, context = {}) {\n    console.log('🎯 Starting Template-First generation...');\n    \n    try {\n      // Step 1: Template Selection (Instant)\n      const selectedTemplate = await this.selectTemplate(prompt, context);\n      console.log(`📋 Selected template: ${selectedTemplate.name}`);\n      \n      // Step 2: Template Instantiation (Instant)\n      const baseApp = await this.instantiateTemplate(selectedTemplate);\n      console.log(`⚡ Instantiated template with ${Object.keys(baseApp.files).length} files`);\n      \n      // Step 3: AI Customization (Fast)\n      const customizedApp = await this.customizeWithAI(baseApp, prompt, context);\n      console.log(`🎨 AI customization completed`);\n      \n      return {\n        success: true,\n        files: customizedApp.files,\n        template: selectedTemplate,\n        metadata: {\n          generationMethod: 'template-first',\n          templateId: selectedTemplate.id,\n          customizationLevel: customizedApp.customizationLevel,\n          generationTime: Date.now() - (context.startTime || Date.now())\n        }\n      };\n      \n    } catch (error) {\n      console.error('❌ Template generation failed:', error);\n      return {\n        success: false,\n        error: error.message,\n        fallback: await this.generateFallback(prompt, context)\n      };\n    }\n  }\n\n  // Step 1: Intelligent Template Selection\n  async selectTemplate(prompt, context) {\n    const startTime = Date.now();\n    \n    // Use template matcher to find best template\n    const matches = await this.templateMatcher.findBestMatches(prompt, {\n      category: context.category,\n      complexity: context.complexity,\n      technologies: context.technologies\n    });\n    \n    if (matches.length === 0) {\n      throw new Error('No suitable template found');\n    }\n    \n    const selectedTemplate = matches[0];\n    console.log(`🎯 Template selected in ${Date.now() - startTime}ms: ${selectedTemplate.name}`);\n    \n    return selectedTemplate;\n  }\n\n  // Step 2: Template Instantiation\n  async instantiateTemplate(template) {\n    const startTime = Date.now();\n    \n    // Create base application from template\n    const baseApp = {\n      id: `app-${Date.now()}`,\n      name: template.name,\n      category: template.category,\n      files: {},\n      metadata: {\n        templateId: template.id,\n        templateName: template.name,\n        instantiationTime: Date.now() - startTime\n      }\n    };\n    \n    // Generate files based on template type\n    if (template.category === 'web') {\n      baseApp.files = await this.generateWebAppFiles(template);\n    } else if (template.category === 'mobile') {\n      baseApp.files = await this.generateMobileAppFiles(template);\n    } else if (template.category === 'games') {\n      baseApp.files = await this.generateGameFiles(template);\n    } else {\n      baseApp.files = await this.generateGenericFiles(template);\n    }\n    \n    console.log(`⚡ Template instantiated in ${Date.now() - startTime}ms`);\n    return baseApp;\n  }\n\n  // Step 3: AI Customization\n  async customizeWithAI(baseApp, prompt, context) {\n    const startTime = Date.now();\n    \n    // Use AI enhancer to customize the base app\n    const customizations = await this.aiEnhancer.analyzeCustomizations(baseApp, prompt, context);\n    \n    // Apply customizations\n    const customizedApp = {\n      ...baseApp,\n      files: {},\n      customizationLevel: customizations.level\n    };\n    \n    // Customize each file\n    for (const [filename, content] of Object.entries(baseApp.files)) {\n      customizedApp.files[filename] = await this.aiEnhancer.customizeFile(\n        filename, \n        content, \n        customizations\n      );\n    }\n    \n    console.log(`🎨 AI customization completed in ${Date.now() - startTime}ms`);\n    return customizedApp;\n  }\n\n  // Template-specific file generation\n  async generateWebAppFiles(template) {\n    const files = {};\n    \n    // Generate HTML\n    files['index.html'] = this.generateHTML(template);\n    \n    // Generate CSS\n    files['styles.css'] = this.generateCSS(template);\n    \n    // Generate JavaScript\n    files['script.js'] = this.generateJavaScript(template);\n    \n    // Generate package.json\n    files['package.json'] = this.generatePackageJson(template);\n    \n    return files;\n  }\n\n  async generateMobileAppFiles(template) {\n    const files = {};\n    \n    // Generate React Native files\n    files['App.js'] = this.generateReactNativeApp(template);\n    files['package.json'] = this.generateReactNativePackage(template);\n    files['metro.config.js'] = this.generateMetroConfig();\n    \n    return files;\n  }\n\n  async generateGameFiles(template) {\n    const files = {};\n    \n    // Generate game files\n    files['index.html'] = this.generateGameHTML(template);\n    files['game.js'] = this.generateGameJavaScript(template);\n    files['styles.css'] = this.generateGameCSS(template);\n    \n    return files;\n  }\n\n  async generateGenericFiles(template) {\n    const files = {};\n    \n    // Generate basic files\n    files['index.html'] = this.generateHTML(template);\n    files['styles.css'] = this.generateCSS(template);\n    files['script.js'] = this.generateJavaScript(template);\n    \n    return files;\n  }\n\n  // File generation methods\n  generateHTML(template) {\n    return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>${template.name}</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div id=\"app\">\n        <header>\n            <h1>${template.name}</h1>\n        </header>\n        <main>\n            <div class=\"content\">\n                <p>Welcome to your ${template.name} application!</p>\n                <div class=\"features\">\n                    ${this.generateFeatureList(template)}\n                </div>\n            </div>\n        </main>\n        <footer>\n            <p>Generated by DreamBuild</p>\n        </footer>\n    </div>\n    <script src=\"script.js\"></script>\n</body>\n</html>`;\n  }\n\n  generateCSS(template) {\n    return `/* ${template.name} Styles */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    line-height: 1.6;\n    color: #333;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    min-height: 100vh;\n}\n\n#app {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 20px;\n}\n\nheader {\n    text-align: center;\n    margin-bottom: 40px;\n    color: white;\n}\n\nheader h1 {\n    font-size: 2.5rem;\n    margin-bottom: 10px;\n}\n\nmain {\n    background: white;\n    border-radius: 10px;\n    padding: 40px;\n    box-shadow: 0 10px 30px rgba(0,0,0,0.1);\n}\n\n.content {\n    text-align: center;\n}\n\n.features {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 20px;\n    margin-top: 30px;\n}\n\n.feature {\n    background: #f8f9fa;\n    padding: 20px;\n    border-radius: 8px;\n    border-left: 4px solid #667eea;\n}\n\nfooter {\n    text-align: center;\n    margin-top: 40px;\n    color: white;\n    opacity: 0.8;\n}`;\n  }\n\n  generateJavaScript(template) {\n    return `// ${template.name} JavaScript\nconsole.log('${template.name} loaded successfully!');\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    console.log('DOM loaded, initializing app...');\n    \n    // Initialize app\n    initializeApp();\n    \n    // Add event listeners\n    setupEventListeners();\n});\n\nfunction initializeApp() {\n    console.log('Initializing ${template.name}...');\n    \n    // Add any initialization logic here\n    const app = document.getElementById('app');\n    if (app) {\n        app.style.opacity = '1';\n        app.style.transition = 'opacity 0.5s ease-in';\n    }\n}\n\nfunction setupEventListeners() {\n    // Add event listeners here\n    console.log('Event listeners setup complete');\n}\n\n// Export for module systems\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = { initializeApp, setupEventListeners };\n}`;\n  }\n\n  generatePackageJson(template) {\n    return JSON.stringify({\n      name: template.name.toLowerCase().replace(/\\s+/g, '-'),\n      version: \"1.0.0\",\n      description: `Generated ${template.name} application`,\n      main: \"script.js\",\n      scripts: {\n        start: \"python -m http.server 8000\",\n        build: \"echo 'Build complete'\",\n        dev: \"python -m http.server 8000\"\n      },\n      keywords: template.tags || [],\n      author: \"DreamBuild\",\n      license: \"MIT\",\n      dependencies: {\n        \"react\": \"^18.0.0\",\n        \"react-dom\": \"^18.0.0\"\n      }\n    }, null, 2);\n  }\n\n  generateFeatureList(template) {\n    const features = template.tags || ['Responsive Design', 'Modern UI', 'Fast Loading'];\n    return features.map(feature => \n      `<div class=\"feature\">\n        <h3>${feature}</h3>\n        <p>Built-in ${feature.toLowerCase()} functionality</p>\n      </div>`\n    ).join('');\n  }\n\n  // Fallback generation\n  async generateFallback(prompt, context) {\n    console.log('🔄 Generating fallback application...');\n    \n    return {\n      success: true,\n      files: {\n        'index.html': `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>DreamBuild App</title>\n    <style>\n        body { font-family: Arial, sans-serif; padding: 20px; text-align: center; }\n        .container { max-width: 600px; margin: 0 auto; }\n        h1 { color: #333; }\n        p { color: #666; margin: 20px 0; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Welcome to DreamBuild</h1>\n        <p>Your application is being generated...</p>\n        <p>Prompt: ${prompt}</p>\n    </div>\n</body>\n</html>`\n      },\n      metadata: {\n        generationMethod: 'fallback',\n        reason: 'Template selection failed'\n      }\n    };\n  }\n\n  // Utility methods\n  getTemplateById(id) {\n    return this.templates.get(id);\n  }\n\n  getTemplatesByCategory(category) {\n    return Array.from(this.templates.values())\n      .filter(template => template.category === category);\n  }\n\n  searchTemplates(query) {\n    const results = [];\n    const searchTerm = query.toLowerCase();\n    \n    for (const template of this.templates.values()) {\n      if (template.name.toLowerCase().includes(searchTerm) ||\n          template.description?.toLowerCase().includes(searchTerm) ||\n          template.tags?.some(tag => tag.toLowerCase().includes(searchTerm))) {\n        results.push(template);\n      }\n    }\n    \n    return results;\n  }\n\n  getStats() {\n    return {\n      totalTemplates: this.templates.size,\n      totalCategories: this.categories.size,\n      categories: Array.from(this.categories.values()).map(cat => ({\n        name: cat.name,\n        count: cat.count,\n        icon: cat.icon\n      }))\n    };\n  }\n}\n\n// AI Customization Service\nclass AICustomizationService {\n  constructor() {\n    this.customizationLevels = {\n      minimal: 0.1,\n      light: 0.3,\n      moderate: 0.5,\n      heavy: 0.7,\n      complete: 1.0\n    };\n  }\n\n  async analyzeCustomizations(baseApp, prompt, context) {\n    // Analyze what customizations are needed\n    const customizations = {\n      level: 'moderate',\n      changes: [],\n      colors: null,\n      content: null,\n      features: []\n    };\n\n    // Determine customization level based on prompt complexity\n    if (prompt.length > 100) {\n      customizations.level = 'heavy';\n    } else if (prompt.length < 50) {\n      customizations.level = 'light';\n    }\n\n    // Extract color preferences\n    const colorMatch = prompt.match(/(blue|red|green|purple|orange|pink|yellow|black|white)/i);\n    if (colorMatch) {\n      customizations.colors = colorMatch[0].toLowerCase();\n    }\n\n    // Extract feature requests\n    const featureKeywords = ['auth', 'payment', 'database', 'api', 'mobile', 'responsive'];\n    customizations.features = featureKeywords.filter(keyword => \n      prompt.toLowerCase().includes(keyword)\n    );\n\n    return customizations;\n  }\n\n  async customizeFile(filename, content, customizations) {\n    let customizedContent = content;\n\n    // Apply color customizations\n    if (customizations.colors) {\n      customizedContent = this.applyColorTheme(customizedContent, customizations.colors);\n    }\n\n    // Apply feature customizations\n    if (customizations.features.length > 0) {\n      customizedContent = this.applyFeatureCustomizations(customizedContent, customizations.features);\n    }\n\n    // Apply content customizations\n    if (customizations.content) {\n      customizedContent = this.applyContentCustomizations(customizedContent, customizations.content);\n    }\n\n    return customizedContent;\n  }\n\n  applyColorTheme(content, color) {\n    const colorMap = {\n      blue: '#3b82f6',\n      red: '#ef4444',\n      green: '#10b981',\n      purple: '#8b5cf6',\n      orange: '#f97316',\n      pink: '#ec4899',\n      yellow: '#f59e0b'\n    };\n\n    const primaryColor = colorMap[color] || colorMap.blue;\n    \n    return content.replace(/#667eea/g, primaryColor);\n  }\n\n  applyFeatureCustomizations(content, features) {\n    let customizedContent = content;\n\n    if (features.includes('auth')) {\n      customizedContent += '\\n/* Authentication styles added */';\n    }\n\n    if (features.includes('payment')) {\n      customizedContent += '\\n/* Payment integration styles added */';\n    }\n\n    if (features.includes('responsive')) {\n      customizedContent = customizedContent.replace(\n        'grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));',\n        'grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));'\n      );\n    }\n\n    return customizedContent;\n  }\n\n  applyContentCustomizations(content, customizations) {\n    // Apply content-specific customizations\n    return content;\n  }\n}\n\n// Template Matcher Service\nclass TemplateMatcher {\n  constructor(templates) {\n    this.templates = templates;\n  }\n\n  async findBestMatches(prompt, context = {}) {\n    const matches = [];\n    const promptLower = prompt.toLowerCase();\n\n    for (const template of this.templates.values()) {\n      let score = 0;\n\n      // Name matching\n      if (template.name.toLowerCase().includes(promptLower)) {\n        score += 10;\n      }\n\n      // Description matching\n      if (template.description?.toLowerCase().includes(promptLower)) {\n        score += 8;\n      }\n\n      // Tag matching\n      if (template.tags) {\n        const tagMatches = template.tags.filter(tag => \n          promptLower.includes(tag.toLowerCase())\n        ).length;\n        score += tagMatches * 5;\n      }\n\n      // Category matching\n      if (context.category && template.category === context.category) {\n        score += 15;\n      }\n\n      // Complexity matching\n      if (context.complexity && template.complexity === context.complexity) {\n        score += 10;\n      }\n\n      if (score > 0) {\n        matches.push({ ...template, score });\n      }\n    }\n\n    // Sort by score and return top matches\n    return matches.sort((a, b) => b.score - a.score).slice(0, 5);\n  }\n}\n\nexport default TemplateBasedGenerator;\n"],"file":"assets/templateBasedGenerator-ZH5pn07u.js"}