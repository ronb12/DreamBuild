// DreamBuild Local AI Service - Simplified and Fixed
// No API keys required - everything runs locally

import axios from 'axios'
import githubTemplateService from './githubTemplateService.js'
import appNamingService from './appNamingService.js'
import htmlCssEnhancementService from './htmlCssEnhancementService.js'

// Local AI Models Configuration
const LOCAL_AI_MODELS = {
  'codellama-7b': {
    name: 'CodeLlama 7B',
    type: 'Code Generation',
    baseURL: 'http://localhost:11434/api',
    model: 'codellama:7b',
    description: 'Fast and efficient code generation (7B parameters)',
    languages: ['python', 'javascript', 'java', 'cpp', 'go', 'rust', 'php', 'ruby'],
    strengths: ['speed', 'efficiency', 'general-purpose'],
    ram_required: '8GB'
  },
  'auto': {
    name: 'Auto Select',
    type: 'Auto Selection',
    baseURL: 'http://localhost:11434/api',
    model: 'auto',
    description: 'Automatically selects the best available model',
    languages: ['all'],
    strengths: ['smart-selection', 'availability'],
    ram_required: 'variable'
  }
}

// Template Categories
const TEMPLATE_CATEGORIES = {
  'web-apps': {
    name: 'Web Applications',
    description: 'Full-stack web applications',
    templates: [
      {
        id: 'react-dashboard',
        name: 'React Dashboard',
        description: 'Modern React dashboard with charts and analytics',
        category: 'web-apps',
        files: ['index.html', 'App.jsx', 'styles.css', 'package.json']
      },
      {
        id: 'ecommerce-store',
        name: 'E-commerce Store',
        description: 'Complete online store with cart and checkout',
        category: 'web-apps',
        files: ['index.html', 'App.jsx', 'styles.css', 'package.json']
      },
      {
        id: 'calculator-app',
        name: 'Calculator App',
        description: 'Modern calculator with basic arithmetic operations',
        category: 'web-apps',
        files: ['index.html', 'styles.css', 'script.js']
      },
      {
        id: 'weather-app',
        name: 'Weather App',
        description: 'Weather application with current conditions and forecast',
        category: 'web-apps',
        files: ['index.html', 'styles.css', 'script.js']
      }
    ]
  },
  'mobile-apps': {
    name: 'Mobile Applications',
    description: 'React Native mobile applications',
    templates: [
      {
        id: 'todo-app',
        name: 'Todo App',
        description: 'Simple todo application with React Native',
        category: 'mobile-apps',
        files: ['App.js', 'components/TodoItem.js', 'styles.js']
      }
    ]
  }
}

class LocalAIService {
  constructor() {
    this.isHealthy = false
    this.modelHealth = {}
    this.availableModels = Object.keys(LOCAL_AI_MODELS)
    this.baseURL = 'http://localhost:11434/api'
    
    // Check if we're in production (HTTPS) or development (HTTP)
    this.isProduction = window.location.protocol === 'https:'
    this.isLocalhost = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1'
    
    if (this.isProduction && !this.isLocalhost) {
      // In production, don't try to connect to local AI to avoid CORS errors
      console.log('🌐 Production environment detected - skipping local AI detection')
      this.isHealthy = false
      return
    }
    
    console.log('🔍 Initializing local AI health monitoring...')
    this.checkHealth()
    
    // Check health every 30 seconds (only log if status changes)
    setInterval(() => {
      this.checkHealthQuiet()
    }, 30000)
  }

  // Check if local AI service is healthy
  async checkHealth() {
    // Skip health check in production to avoid CORS errors
    if (this.isProduction && !this.isLocalhost) {
      return
    }
    
    try {
      const response = await axios.get(`${this.baseURL}/tags`, {
        timeout: 3000
      })
      
      if (response.status === 200) {
        const wasHealthy = this.isHealthy
        this.isHealthy = true
        if (!wasHealthy) {
          console.log('✅ Local AI service is healthy')
        }
        
        // Update model health
        const models = response.data.models || []
        this.modelHealth = {}
        models.forEach(model => {
          this.modelHealth[model.name] = {
            isHealthy: true,
            size: model.size,
            modified_at: model.modified_at
          }
        })
      } else {
        const wasHealthy = this.isHealthy
        this.isHealthy = false
        if (wasHealthy) {
          console.log('⚠️ Local AI service is not responding')
        }
      }
    } catch (error) {
      const wasHealthy = this.isHealthy
      this.isHealthy = false
      
      // Handle different types of errors more gracefully
      if (error.code === 'ERR_NETWORK' || error.message.includes('CORS')) {
        // CORS or network error - expected in production
        if (!wasHealthy) {
          console.log('🔒 Local AI not accessible (CORS/Network) - using cloud AI')
        }
      } else if (error.code === 'ECONNREFUSED') {
        // Connection refused - Ollama not running
        if (!wasHealthy) {
          console.log('💻 Ollama not running locally - using cloud AI')
        }
      } else {
        // Other errors
        if (!wasHealthy) {
          console.log('⚠️ Local AI service not available:', error.message)
        }
      }
    }
  }

  // Quiet health check (only logs on status change)
  async checkHealthQuiet() {
    // Skip health check in production to avoid CORS errors
    if (this.isProduction && !this.isLocalhost) {
      return
    }
    
    try {
      const response = await axios.get(`${this.baseURL}/tags`, {
        timeout: 3000
      })
      
      if (response.status === 200) {
        const wasHealthy = this.isHealthy
        this.isHealthy = true
        
        // Update model health silently
        const models = response.data.models || []
        this.modelHealth = {}
        models.forEach(model => {
          this.modelHealth[model.name] = {
            isHealthy: true,
            size: model.size,
            modified_at: model.modified_at
          }
        })
      } else {
        this.isHealthy = false
      }
    } catch (error) {
      this.isHealthy = false
      // Silent fail for quiet check - no logging
    }
  }

  // Get available models
  getAvailableModels() {
    return Object.values(LOCAL_AI_MODELS)
  }

  // Get healthy models
  getHealthyModels() {
    return Object.keys(this.modelHealth).filter(model => this.modelHealth[model].isHealthy)
  }

  // Get template categories
  getTemplateCategories() {
    return TEMPLATE_CATEGORIES
  }

  // Get templates by category
  getTemplatesByCategory(category) {
    return TEMPLATE_CATEGORIES[category]?.templates || []
  }

  // Get all templates (local + GitHub)
  async getAllTemplates() {
    const localTemplates = []
    Object.values(TEMPLATE_CATEGORIES).forEach(category => {
      localTemplates.push(...category.templates)
    })
    
    // Get GitHub templates
    const githubTemplates = await githubTemplateService.getTrendingTemplates()
    
    // Transform GitHub repositories to template format
    const transformedGitHubTemplates = githubTemplates.map(repo => 
      githubTemplateService.transformRepositoryToTemplate(repo)
    )
    
    // Combine local and GitHub templates
    return [...localTemplates, ...transformedGitHubTemplates]
  }

  // Search templates (local + GitHub)
  async searchTemplates(query) {
    const localTemplates = []
    Object.values(TEMPLATE_CATEGORIES).forEach(category => {
      localTemplates.push(...category.templates)
    })
    
    // Search GitHub templates
    const githubResults = await githubTemplateService.searchTemplates(query)
    
    // Transform GitHub results to template format
    const transformedGitHubResults = githubResults.map(repo => 
      githubTemplateService.transformRepositoryToTemplate(repo)
    )
    
    // Combine results
    const allTemplates = [...localTemplates, ...transformedGitHubResults]
    
    return allTemplates.filter(template => 
      template.name.toLowerCase().includes(query.toLowerCase()) ||
      (template.description || '').toLowerCase().includes(query.toLowerCase())
    )
  }

  // Get popular templates (local + GitHub)
  async getPopularTemplates() {
    const localTemplates = []
    Object.values(TEMPLATE_CATEGORIES).forEach(category => {
      localTemplates.push(...category.templates)
    })
    
    // Get popular GitHub templates
    const githubPopular = await githubTemplateService.getPopularTemplates(5)
    
    // Transform GitHub results to template format
    const transformedGitHubPopular = githubPopular.map(repo => 
      githubTemplateService.transformRepositoryToTemplate(repo)
    )
    
    // Combine and sort by popularity
    const allTemplates = [...localTemplates, ...transformedGitHubPopular]
    return allTemplates
      .sort((a, b) => (b.popularity || 0) - (a.popularity || 0))
      .slice(0, 10)
  }

  // Generate template by ID
  async generateTemplateById(templateId, customizations = {}) {
    console.log(`🔍 Looking for template: ${templateId}`)
    
    // Check if it's a GitHub template
    if (templateId.startsWith('github_')) {
      return await this.generateGitHubTemplate(templateId, customizations)
    }
    
    // Handle local templates
    const localTemplates = []
    Object.values(TEMPLATE_CATEGORIES).forEach(category => {
      localTemplates.push(...category.templates)
    })
    
    console.log(`📋 Available templates: ${localTemplates.map(t => t.id).join(', ')}`)
    
    const template = localTemplates.find(t => t.id === templateId)
    
    if (!template) {
      console.error(`❌ Template ${templateId} not found`)
      throw new Error(`Template ${templateId} not found`)
    }

    console.log(`✅ Found template: ${template.name}`)
    const files = this.createTemplateFiles(template, customizations)
    console.log(`📁 Generated files: ${Object.keys(files).join(', ')}`)
    return files
  }

  // Generate GitHub template
  async generateGitHubTemplate(templateId, customizations = {}) {
    try {
      console.log(`🚀 Generating GitHub template: ${templateId}`)
      
      const template = await githubTemplateService.getTemplateById(templateId)
      
      if (!template) {
        throw new Error(`GitHub template ${templateId} not found`)
      }

      // Create template files from GitHub repository
      const files = await this.createGitHubTemplateFiles(template, customizations)
      
      console.log(`✅ Generated ${Object.keys(files).length} files from GitHub template`)
      return files
      
    } catch (error) {
      console.error(`❌ Failed to generate GitHub template ${templateId}:`, error)
      throw error
    }
  }

  // Create files from GitHub template
  async createGitHubTemplateFiles(template, customizations = {}) {
    const files = {}
    
    try {
      // For GitHub templates, we'll create a basic structure
      // In a full implementation, you would clone the repository and extract files
      
      const { githubData } = template
      
      // Create basic project files
      files['README.md'] = `# ${template.name}

${template.description}

## GitHub Repository
- **Source**: [${githubData.fullName}](${githubData.htmlUrl})
- **Stars**: ${githubData.stargazersCount}
- **Language**: ${githubData.language || 'JavaScript'}

## Getting Started

This template is based on the GitHub repository: ${githubData.fullName}

### Installation
\`\`\`bash
git clone ${githubData.cloneUrl}
cd ${githubData.fullName}
npm install
\`\`\`

### Development
\`\`\`bash
npm start
\`\`\`

## Template Information
- **Type**: ${template.templateType}
- **Category**: ${template.category}
- **Tags**: ${template.tags.join(', ')}
- **Files**: ${template.fileCount}

## Customization
You can customize this template by modifying the files or using the AI prompt to generate additional features.
`

      // Create package.json based on template type
      files['package.json'] = this.createPackageJson(template, customizations)
      
      // Create main entry file based on template type
      files[this.getMainFileName(template)] = this.createMainFile(template, customizations)
      
      // Create basic HTML file if it's a web template
      if (template.templateType === 'react' || template.templateType === 'vue' || template.templateType === 'web') {
        files['index.html'] = this.createIndexHtml(template, customizations)
      }
      
      // Add customizations
      Object.entries(customizations).forEach(([key, value]) => {
        if (typeof value === 'string') {
          files[key] = value
        }
      })
      
      return files
      
    } catch (error) {
      console.error('Failed to create GitHub template files:', error)
      throw error
    }
  }

  // Create package.json for GitHub template
  createPackageJson(template, customizations = {}) {
    const basePackage = {
      name: template.name.toLowerCase().replace(/\s+/g, '-'),
      version: '1.0.0',
      description: template.description,
      main: this.getMainFileName(template),
      scripts: {
        start: 'npm run dev',
        dev: this.getDevScript(template),
        build: this.getBuildScript(template),
        test: 'echo "No tests specified" && exit 0'
      },
      keywords: template.tags,
      author: customizations.author || 'DreamBuild User',
      license: 'MIT',
      repository: {
        type: 'git',
        url: template.githubData.cloneUrl
      }
    }

    // Add dependencies based on template type
    basePackage.dependencies = this.getTemplateDependencies(template)
    basePackage.devDependencies = this.getTemplateDevDependencies(template)

    return JSON.stringify(basePackage, null, 2)
  }

  // Get main file name based on template type
  getMainFileName(template) {
    const mainFiles = {
      'react': 'src/App.jsx',
      'vue': 'src/main.js',
      'angular': 'src/main.ts',
      'nodejs': 'index.js',
      'python': 'main.py',
      'mobile': 'App.js',
      'web': 'index.js'
    }
    
    return mainFiles[template.templateType] || 'index.js'
  }

  // Get dev script based on template type
  getDevScript(template) {
    const devScripts = {
      'react': 'react-scripts start',
      'vue': 'vue-cli-service serve',
      'angular': 'ng serve',
      'nodejs': 'nodemon index.js',
      'python': 'python main.py',
      'mobile': 'expo start',
      'web': 'live-server'
    }
    
    return devScripts[template.templateType] || 'node index.js'
  }

  // Get build script based on template type
  getBuildScript(template) {
    const buildScripts = {
      'react': 'react-scripts build',
      'vue': 'vue-cli-service build',
      'angular': 'ng build',
      'nodejs': 'echo "No build step needed"',
      'python': 'echo "No build step needed"',
      'mobile': 'expo build',
      'web': 'echo "No build step needed"'
    }
    
    return buildScripts[template.templateType] || 'echo "No build step needed"'
  }

  // Get template dependencies
  getTemplateDependencies(template) {
    const dependencies = {
      'react': {
        'react': '^18.0.0',
        'react-dom': '^18.0.0'
      },
      'vue': {
        'vue': '^3.0.0'
      },
      'angular': {
        '@angular/core': '^15.0.0',
        '@angular/common': '^15.0.0'
      },
      'svelte': {
        'svelte': '^3.0.0'
      },
      'nodejs': {
        'express': '^4.18.0'
      },
      'python': {},
      'php': {},
      'go': {},
      'rust': {},
      'java': {},
      'mobile': {
        'react-native': '^0.70.0',
        'expo': '~47.0.0'
      },
      'api': {
        'express': '^4.18.0'
      },
      'dashboard': {
        'react': '^18.0.0',
        'react-dom': '^18.0.0'
      },
      'ecommerce': {
        'react': '^18.0.0',
        'react-dom': '^18.0.0'
      },
      'blog': {
        'next': '^13.0.0',
        'react': '^18.0.0'
      },
      'portfolio': {
        'react': '^18.0.0',
        'react-dom': '^18.0.0'
      },
      'landing': {
        'react': '^18.0.0',
        'react-dom': '^18.0.0'
      },
      'web': {}
    }
    
    return dependencies[template.templateType] || {}
  }

  // Get template dev dependencies
  getTemplateDevDependencies(template) {
    const devDependencies = {
      'react': {
        'react-scripts': '5.0.1'
      },
      'vue': {
        '@vue/cli-service': '^5.0.0'
      },
      'angular': {
        '@angular/cli': '^15.0.0'
      },
      'svelte': {
        'vite': '^4.0.0'
      },
      'nodejs': {
        'nodemon': '^2.0.0'
      },
      'python': {},
      'php': {},
      'go': {},
      'rust': {},
      'java': {},
      'mobile': {},
      'api': {
        'nodemon': '^2.0.0'
      },
      'dashboard': {
        'react-scripts': '5.0.1'
      },
      'ecommerce': {
        'react-scripts': '5.0.1'
      },
      'blog': {
        'next': '^13.0.0'
      },
      'portfolio': {
        'react-scripts': '5.0.1'
      },
      'landing': {
        'react-scripts': '5.0.1'
      },
      'web': {
        'live-server': '^1.2.0'
      }
    }
    
    return devDependencies[template.templateType] || {}
  }

  // Create main file content
  createMainFile(template, customizations = {}) {
    const mainFiles = {
      'react': `import React from 'react';
import './App.css';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <h1>${template.name}</h1>
        <p>${template.description}</p>
        <p>
          Template based on: <a href="${template.githubData.htmlUrl}">${template.githubData.fullName}</a>
        </p>
      </header>
    </div>
  );
}

export default App;`,
      'vue': `import { createApp } from 'vue';
import App from './App.vue';

createApp(App).mount('#app');`,
      'angular': `import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  template: \`
    <div class="app">
      <h1>${template.name}</h1>
      <p>${template.description}</p>
      <p>Template based on: <a href="${template.githubData.htmlUrl}">${template.githubData.fullName}</a></p>
    </div>
  \`,
  styles: []
})
export class AppComponent {
  title = '${template.name}';
}`,
      'svelte': `<script>
  export let name = '${template.name}';
</script>

<main>
  <h1>${template.name}</h1>
  <p>${template.description}</p>
  <p>Template based on: <a href="${template.githubData.htmlUrl}">${template.githubData.fullName}</a></p>
</main>`,
      'nodejs': `const express = require('express');
const app = express();
// PORT removed - not needed in browser code

app.get('/', (req, res) => {
  res.send(\`
    <h1>${template.name}</h1>
    <p>${template.description}</p>
    <p>Template based on: <a href="${template.githubData.htmlUrl}">${template.githubData.fullName}</a></p>
  \`);
});

app.listen(PORT, () => {

});`,
      'python': `from flask import Flask, render_template

app = Flask(__name__)

@app.route('/')
def home():
    return render_template('index.html', 
                         title='${template.name}',
                         description='${template.description}',
                         github_url='${template.githubData.htmlUrl}')

if __name__ == '__main__':
    app.run(debug=True)`,
      'php': `<?php
echo "<h1>${template.name}</h1>";
echo "<p>${template.description}</p>";
echo "<p>Template based on: <a href='${template.githubData.htmlUrl}'>${template.githubData.fullName}</a></p>";
?>`,
      'go': `package main

import (
    "fmt"
    "net/http"
)

func handler(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, "<h1>%s</h1><p>%s</p><p>Template based on: <a href='%s'>%s</a></p>", 
                "${template.name}", "${template.description}", "${template.githubData.htmlUrl}", "${template.githubData.fullName}")
}

func main() {
    http.HandleFunc("/", handler)
    http.ListenAndServe(":8080", nil)
}`,
      'rust': `use std::io;

fn main() {
    println!("Hello from {}!", "${template.name}");
    println!("{}", "${template.description}");
    println!("Template based on: {}", "${template.githubData.fullName}");
}`,
      'java': `public class Main {
    public static void main(String[] args) {
        System.out.println("${template.name}");
        System.out.println("${template.description}");
        System.out.println("Template based on: ${template.githubData.fullName}");
    }
}`,
      'api': `const express = require('express');
const app = express();
// PORT removed - not needed in browser code

app.use(express.json());

app.get('/api', (req, res) => {
  res.json({
    name: '${template.name}',
    description: '${template.description}',
    github: '${template.githubData.fullName}'
  });
});

app.listen(PORT, () => {

});`,
      'dashboard': `import React from 'react';
import './Dashboard.css';

function Dashboard() {
  return (
    <div className="dashboard">
      <header className="dashboard-header">
        <h1>${template.name}</h1>
        <p>${template.description}</p>
      </header>
      <main className="dashboard-content">
        <div className="stats-grid">
          <div className="stat-card">Users</div>
          <div className="stat-card">Revenue</div>
          <div className="stat-card">Orders</div>
        </div>
      </main>
    </div>
  );
}

export default Dashboard;`,
      'mobile': `import React from 'react';
import { View, Text, StyleSheet } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <Text style={styles.title}>${template.name}</Text>
      <Text style={styles.description}>${template.description}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
  },
  description: {
    fontSize: 16,
    textAlign: 'center',
  },
});`,
      'web': `// ${template.name}
// ${template.description}

// Template based on: ${template.githubData.fullName}
// Repository: ${template.githubData.htmlUrl}`
    }
    
    return mainFiles[template.templateType] || mainFiles['web']
  }

  // Create index.html
  createIndexHtml(template, customizations = {}) {
    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${template.name}</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            min-height: 100vh;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            text-align: center;
        }
        h1 {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
        p {
            font-size: 1.2rem;
            margin-bottom: 2rem;
        }
        a {
            color: #fff;
            text-decoration: underline;
        }
        .github-info {
            background: rgba(255, 255, 255, 0.1);
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>${template.name}</h1>
        <p>${template.description}</p>
        
        <div class="github-info">
            <h3>GitHub Repository</h3>
            <p><strong>Source:</strong> <a href="${template.githubData.htmlUrl}">${template.githubData.fullName}</a></p>
            <p><strong>Stars:</strong> ${template.githubData.stargazersCount}</p>
            <p><strong>Language:</strong> ${template.githubData.language || 'JavaScript'}</p>
            <p><strong>Template Type:</strong> ${template.templateType}</p>
        </div>
        
        <p>🚀 Generated with DreamBuild's GitHub Template Integration</p>
    </div>
</body>
</html>`
  }

  // Create template files
  createTemplateFiles(template, customizations = {}) {
    const files = {}
    
    // Default files based on template
    switch (template.id) {
      case 'react-dashboard':
        files['index.html'] = `<div id="root"></div>
<script src="https://unpkg.com/react@18/umd/react.development.js"></script>
<script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
<script src="App.jsx"></script>`
        
        files['App.jsx'] = `import React, { useState } from 'react';

function Dashboard() {
  const [stats, setStats] = useState({
    users: 1250,
    revenue: 45230,
    orders: 89,
    growth: 12.5
  });

  return (
    <div className="dashboard">
      <header className="dashboard-header">
        <h1>Analytics Dashboard</h1>
        <p>Welcome to your business dashboard</p>
      </header>
      
      <div className="stats-grid">
        <div className="stat-card">
          <h3>Total Users</h3>
          <p className="stat-number">{stats.users.toLocaleString()}</p>
        </div>
        <div className="stat-card">
          <h3>Revenue</h3>
          <p className="stat-number">$${stats.revenue.toLocaleString()}</p>
        </div>
        <div className="stat-card">
          <h3>Orders</h3>
          <p className="stat-number">{stats.orders}</p>
        </div>
        <div className="stat-card">
          <h3>Growth</h3>
          <p className="stat-number">+{stats.growth}%</p>
        </div>
      </div>
    </div>
  );
}

ReactDOM.render(<Dashboard />, document.getElementById('root'));`
        
        files['styles.css'] = `* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  min-height: 100vh;
}

.dashboard {
  padding: 2rem;
  max-width: 1200px;
  margin: 0 auto;
}

.dashboard-header {
  text-align: center;
  margin-bottom: 3rem;
  color: white;
}

.dashboard-header h1 {
  font-size: 3rem;
  margin-bottom: 0.5rem;
  font-weight: 700;
}

.dashboard-header p {
  font-size: 1.2rem;
  opacity: 0.9;
}

.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 2rem;
}

.stat-card {
  background: white;
  padding: 2rem;
  border-radius: 1rem;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  text-align: center;
  transition: transform 0.3s ease;
}

.stat-card:hover {
  transform: translateY(-5px);
}

.stat-card h3 {
  color: #666;
  font-size: 1rem;
  margin-bottom: 1rem;
  text-transform: uppercase;
  letter-spacing: 0.1em;
}

.stat-number {
  font-size: 2.5rem;
  font-weight: 700;
  color: #333;
}`

        files['package.json'] = `{
  "name": "react-dashboard",
  "version": "1.0.0",
  "description": "Modern React Dashboard",
  "main": "App.jsx",
  "scripts": {
    "start": "python -m http.server 8000",
    "dev": "python -m http.server 8000"
  },
  "dependencies": {
    "react": "^18.0.0",
    "react-dom": "^18.0.0"
  },
  "keywords": ["react", "dashboard", "analytics"],
  "author": "DreamBuild",
  "license": "MIT"
}`
        break

      case 'todo-app':
        files['index.html'] = `<div class="container">
        <h1>Todo App</h1>
        
        <div class="input-container">
            <input type="text" id="todoInput" placeholder="Add a new todo..." />
            <button id="addButton">Add</button>
        </div>
        
        <div class="filters">
            <button class="filter-btn active" data-filter="all">All</button>
            <button class="filter-btn" data-filter="active">Active</button>
            <button class="filter-btn" data-filter="completed">Completed</button>
        </div>
        
        <ul id="todoList"></ul>
        
        <div class="stats">
            <span id="totalCount">0</span> total, <span id="activeCount">0</span> active, <span id="completedCount">0</span> completed
        </div>
    </div>
    
    <script src="script.js"></script>`
        
        files['styles.css'] = `* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    padding: 20px;
}

.container {
    max-width: 600px;
    margin: 0 auto;
    background: white;
    border-radius: 20px;
    padding: 30px;
    box-shadow: 0 20px 40px rgba(0,0,0,0.1);
}

h1 {
    text-align: center;
    color: #333;
    margin-bottom: 30px;
    font-size: 2.5em;
    font-weight: 300;
}

.input-container {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
}

#todoInput {
    flex: 1;
    padding: 15px;
    border: 2px solid #e1e5e9;
    border-radius: 10px;
    font-size: 16px;
    outline: none;
    transition: border-color 0.3s;
}

#todoInput:focus {
    border-color: #667eea;
}

#addButton {
    padding: 15px 25px;
    background: #667eea;
    color: white;
    border: none;
    border-radius: 10px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: background 0.3s;
}

#addButton:hover {
    background: #5a6fd8;
}

.filters {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
    justify-content: center;
}

.filter-btn {
    padding: 8px 16px;
    border: 2px solid #e1e5e9;
    background: white;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.3s;
    font-size: 14px;
}

.filter-btn.active {
    background: #667eea;
    color: white;
    border-color: #667eea;
}

.filter-btn:hover {
    border-color: #667eea;
}

#todoList {
    list-style: none;
    margin-bottom: 20px;
}

.todo-item {
    display: flex;
    align-items: center;
    padding: 15px;
    margin-bottom: 10px;
    background: #f8f9fa;
    border-radius: 10px;
    transition: all 0.3s;
}

.todo-item:hover {
    background: #e9ecef;
}

.todo-item.completed {
    opacity: 0.6;
}

.todo-item.completed .todo-text {
    text-decoration: line-through;
    color: #6c757d;
}

.todo-checkbox {
    margin-right: 15px;
    width: 20px;
    height: 20px;
    cursor: pointer;
}

.todo-text {
    flex: 1;
    font-size: 16px;
    color: #333;
    cursor: pointer;
}

.delete-btn {
    background: #dc3545;
    color: white;
    border: none;
    padding: 8px 12px;
    border-radius: 6px;
    cursor: pointer;
    font-size: 12px;
    font-weight: 600;
    transition: background 0.3s;
}

.delete-btn:hover {
    background: #c82333;
}

.stats {
    text-align: center;
    color: #6c757d;
    font-size: 14px;
    padding: 15px;
    background: #f8f9fa;
    border-radius: 10px;
}`
        
        files['script.js'] = `class TodoApp {
    constructor() {
        this.todos = JSON.parse(localStorage.getItem('todos')) || [];
        this.currentFilter = 'all';
        this.init();
    }
    
    init() {
        this.bindEvents();
        this.render();
        this.updateStats();
    }
    
    bindEvents() {
        console.log('🔍 Binding events...');
        const addButton = document.getElementById('addButton');
        if (addButton) {
            console.log('✅ Add button found for event binding');
            addButton.addEventListener('click', () => {
                console.log('🔘 Add button clicked!');
                this.addTodo();
            });
        } else {
            console.log('❌ Add button not found for event binding');
        }
        
        const todoInput = document.getElementById('todoInput');
        if (todoInput) {
            console.log('✅ Todo input found for event binding');
            todoInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    console.log('🔘 Enter key pressed!');
                    this.addTodo();
                }
            });
        } else {
            console.log('❌ Todo input not found for event binding');
        }
        
        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.addEventListener('click', (e) => this.setFilter(e.target.dataset.filter));
        });
    }
    
    addTodo() {
        console.log('🔍 addTodo() called');
        const input = document.getElementById('todoInput');
        const text = input.value.trim();
        console.log('🔍 Input value:', text);
        
        // Validation
        if (!text) {
            console.log('❌ No text entered');
            this.showError('Please enter a todo item');
            return;
        }
        
        if (text.length < 2) {
            this.showError('Todo must be at least 2 characters long');
            return;
        }
        
        if (text.length > 100) {
            this.showError('Todo must be less than 100 characters');
            return;
        }
        
        // Check for duplicates
        if (this.todos.some(todo => todo.text.toLowerCase() === text.toLowerCase())) {
            this.showError('This todo already exists');
            return;
        }
        
        const todo = {
            id: Date.now(),
            text: text,
            completed: false,
            createdAt: new Date()
        };
        
        console.log('🔍 Adding todo to array:', todo);
        this.todos.unshift(todo);
        input.value = '';
        this.clearError();
        this.saveTodos();
        console.log('🔍 Calling render()');
        this.render();
        this.updateStats();
        this.showSuccess('Todo added successfully!');
        console.log('✅ Todo added successfully');
    }
    
    toggleTodo(id) {
        const todo = this.todos.find(t => t.id === id);
        if (todo) {
            todo.completed = !todo.completed;
            this.saveTodos();
            this.render();
            this.updateStats();
        }
    }
    
    deleteTodo(id) {
        this.todos = this.todos.filter(t => t.id !== id);
        this.saveTodos();
        this.render();
        this.updateStats();
    }
    
    setFilter(filter) {
        this.currentFilter = filter;
        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector(\`[data-filter="\${filter}"]\`).classList.add('active');
        this.render();
    }
    
    getFilteredTodos() {
        switch (this.currentFilter) {
            case 'active':
                return this.todos.filter(t => !t.completed);
            case 'completed':
                return this.todos.filter(t => t.completed);
            default:
                return this.todos;
        }
    }
    
    render() {
        const todoList = document.getElementById('todoList');
        const filteredTodos = this.getFilteredTodos();
        
        todoList.innerHTML = filteredTodos.map(todo => \`
            <li class="todo-item \${todo.completed ? 'completed' : ''}">
                <input type="checkbox" class="todo-checkbox" \${todo.completed ? 'checked' : ''} 
                       onchange="todoApp.toggleTodo(\${todo.id})">
                <span class="todo-text" onclick="todoApp.toggleTodo(\${todo.id})">\${todo.text}</span>
                <button class="delete-btn" onclick="todoApp.deleteTodo(\${todo.id})">Delete</button>
            </li>
        \`).join('');
    }
    
    updateStats() {
        const total = this.todos.length;
        const completed = this.todos.filter(t => t.completed).length;
        const active = total - completed;
        
        document.getElementById('totalCount').textContent = total;
        document.getElementById('activeCount').textContent = active;
        document.getElementById('completedCount').textContent = completed;
    }
    
    showError(message) {
        // Remove existing error
        this.clearError();
        
        // Create error element
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-message';
        errorDiv.textContent = message;
        errorDiv.style.cssText = 'background: #f8d7da; color: #721c24; padding: 10px; border-radius: 5px; margin: 10px 0; border: 1px solid #f5c6cb;';
        
        // Insert after input container
        const inputContainer = document.querySelector('.input-container');
        inputContainer.parentNode.insertBefore(errorDiv, inputContainer.nextSibling);
    }
    
    clearError() {
        const existingError = document.querySelector('.error-message');
        if (existingError) {
            existingError.remove();
        }
    }
    
    showSuccess(message) {
        // Create success notification
        const successDiv = document.createElement('div');
        successDiv.className = 'success-message';
        successDiv.textContent = message;
        successDiv.style.cssText = 'position: fixed; top: 20px; right: 20px; background: #d4edda; color: #155724; padding: 15px 20px; border-radius: 8px; border: 1px solid #c3e6cb; z-index: 1000; animation: slideIn 0.3s ease;';
        
        document.body.appendChild(successDiv);
        
        // Remove after 3 seconds
        setTimeout(() => {
            successDiv.remove();
        }, 3000);
    }
    
    saveTodos() {
        localStorage.setItem('todos', JSON.stringify(this.todos));
    }
}

// Add CSS animation
const style = document.createElement('style')
style.textContent = \`
    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
\`
document.head.appendChild(style)

// Initialize the app when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    const todoApp = new TodoApp();
});`
        break

      case 'ecommerce-store':
        files['index.html'] = `<div class="container">
        <header>
            <h1>DreamStore</h1>
            <div class="cart">
                <span id="cartCount">0</span>
                <button id="cartButton">Cart</button>
            </div>
        </header>
        
        <div class="products" id="products">
            <!-- Products will be loaded here -->
        </div>
        
        <div class="cart-modal" id="cartModal">
            <div class="cart-content">
                <h2>Shopping Cart</h2>
                <div id="cartItems"></div>
                <div class="cart-total">
                    Total: $<span id="cartTotal">0.00</span>
                </div>
                <button id="checkoutButton">Checkout</button>
                <button id="closeCart">Close</button>
            </div>
        </div>
    </div>
    
    <script src="script.js"></script>`
        
        files['styles.css'] = `* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    background: #f5f5f5;
    color: #333;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: white;
    padding: 20px;
    border-radius: 10px;
    margin-bottom: 30px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

h1 {
    color: #2c3e50;
    font-size: 2.5em;
    font-weight: 300;
}

.cart {
    display: flex;
    align-items: center;
    gap: 10px;
}

#cartCount {
    background: #e74c3c;
    color: white;
    padding: 5px 10px;
    border-radius: 50%;
    font-weight: bold;
}

#cartButton {
    background: #3498db;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    transition: background 0.3s;
}

#cartButton:hover {
    background: #2980b9;
}

.products {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
}

.product {
    background: white;
    border-radius: 10px;
    padding: 20px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    transition: transform 0.3s;
}

.product:hover {
    transform: translateY(-5px);
}

.product img {
    width: 100%;
    height: 200px;
    object-fit: cover;
    border-radius: 8px;
    margin-bottom: 15px;
}

.product h3 {
    font-size: 1.2em;
    margin-bottom: 10px;
    color: #2c3e50;
}

.product p {
    color: #7f8c8d;
    margin-bottom: 15px;
    line-height: 1.5;
}

.product-price {
    font-size: 1.5em;
    font-weight: bold;
    color: #27ae60;
    margin-bottom: 15px;
}

.add-to-cart {
    background: #27ae60;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    width: 100%;
    transition: background 0.3s;
}

.add-to-cart:hover {
    background: #229954;
}

.cart-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.5);
    z-index: 1000;
}

.cart-content {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: white;
    padding: 30px;
    border-radius: 10px;
    max-width: 500px;
    width: 90%;
    max-height: 80vh;
    overflow-y: auto;
}

.cart-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 0;
    border-bottom: 1px solid #eee;
}

.cart-item:last-child {
    border-bottom: none;
}

.cart-total {
    font-size: 1.5em;
    font-weight: bold;
    margin: 20px 0;
    text-align: center;
    color: #27ae60;
}

#checkoutButton, #closeCart {
    background: #3498db;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    margin: 5px;
    transition: background 0.3s;
}

#checkoutButton:hover, #closeCart:hover {
    background: #2980b9;
}

#closeCart {
    background: #95a5a6;
}

#closeCart:hover {
    background: #7f8c8d;
}`
        
        files['script.js'] = `class EcommerceStore {
    constructor() {
        this.products = [
            {
                id: 1,
                name: 'Wireless Headphones',
                price: 99.99,
                description: 'High-quality wireless headphones with noise cancellation',
                image: 'https://via.placeholder.com/300x200/3498db/ffffff?text=Headphones'
            },
            {
                id: 2,
                name: 'Smart Watch',
                price: 199.99,
                description: 'Advanced smartwatch with health monitoring features',
                image: 'https://via.placeholder.com/300x200/e74c3c/ffffff?text=Smart+Watch'
            },
            {
                id: 3,
                name: 'Laptop Stand',
                price: 49.99,
                description: 'Adjustable laptop stand for better ergonomics',
                image: 'https://via.placeholder.com/300x200/27ae60/ffffff?text=Laptop+Stand'
            },
            {
                id: 4,
                name: 'Mechanical Keyboard',
                price: 129.99,
                description: 'RGB mechanical keyboard with customizable keys',
                image: 'https://via.placeholder.com/300x200/9b59b6/ffffff?text=Keyboard'
            }
        ];
        
        this.cart = JSON.parse(localStorage.getItem('cart')) || [];
        this.init();
    }
    
    init() {
        this.renderProducts();
        this.updateCartCount();
        this.bindEvents();
    }
    
    bindEvents() {
        document.getElementById('cartButton').addEventListener('click', () => this.openCart());
        document.getElementById('closeCart').addEventListener('click', () => this.closeCart());
        document.getElementById('checkoutButton').addEventListener('click', () => this.checkout());
        
        // Close cart when clicking outside
        document.getElementById('cartModal').addEventListener('click', (e) => {
            if (e.target.id === 'cartModal') {
                this.closeCart();
            }
        });
    }
    
    renderProducts() {
        const productsContainer = document.getElementById('products');
        productsContainer.innerHTML = this.products.map(product => \`
            <div class="product">
                <img src="\${product.image}" alt="\${product.name}">
                <h3>\${product.name}</h3>
                <p>\${product.description}</p>
                <div class="product-price">$\${product.price.toFixed(2)}</div>
                <button class="add-to-cart" onclick="store.addToCart(\${product.id})">
                    Add to Cart
                </button>
            </div>
        \`).join('');
    }
    
    addToCart(productId) {
        const product = this.products.find(p => p.id === productId);
        if (product) {
            const existingItem = this.cart.find(item => item.id === productId);
            if (existingItem) {
                existingItem.quantity += 1;
            } else {
                this.cart.push({ ...product, quantity: 1 });
            }
            this.saveCart();
            this.updateCartCount();
            this.showNotification('Product added to cart!');
        }
    }
    
    removeFromCart(productId) {
        this.cart = this.cart.filter(item => item.id !== productId);
        this.saveCart();
        this.updateCartCount();
        this.renderCart();
    }
    
    updateQuantity(productId, quantity) {
        const item = this.cart.find(item => item.id === productId);
        if (item) {
            if (quantity <= 0) {
                this.removeFromCart(productId);
            } else {
                item.quantity = quantity;
                this.saveCart();
                this.updateCartCount();
                this.renderCart();
            }
        }
    }
    
    openCart() {
        this.renderCart();
        document.getElementById('cartModal').style.display = 'block';
    }
    
    closeCart() {
        document.getElementById('cartModal').style.display = 'none';
    }
    
    renderCart() {
        const cartItems = document.getElementById('cartItems');
        const cartTotal = document.getElementById('cartTotal');
        
        if (this.cart.length === 0) {
            cartItems.innerHTML = '<p>Your cart is empty</p>';
            cartTotal.textContent = '0.00';
            return;
        }
        
        cartItems.innerHTML = this.cart.map(item => \`
            <div class="cart-item">
                <div>
                    <h4>\${item.name}</h4>
                    <p>$\${item.price.toFixed(2)} each</p>
                </div>
                <div>
                    <input type="number" value="\${item.quantity}" min="1" 
                           onchange="store.updateQuantity(\${item.id}, parseInt(this.value))" 
                           style="width: 60px; margin-right: 10px;">
                    <button onclick="store.removeFromCart(\${item.id})" 
                            style="background: #e74c3c; color: white; border: none; padding: 5px 10px; border-radius: 3px; cursor: pointer;">
                        Remove
                    </button>
                </div>
            </div>
        \`).join('');
        
        const total = this.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
        cartTotal.textContent = total.toFixed(2);
    }
    
    updateCartCount() {
        const count = this.cart.reduce((sum, item) => sum + item.quantity, 0);
        document.getElementById('cartCount').textContent = count;
    }
    
    checkout() {
        if (this.cart.length === 0) {
            alert('Your cart is empty!');
            return;
        }
        
        const total = this.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
        alert(\`Thank you for your purchase! Total: $\${total.toFixed(2)}\`);
        
        this.cart = [];
        this.saveCart();
        this.updateCartCount();
        this.closeCart();
    }
    
    saveCart() {
        localStorage.setItem('cart', JSON.stringify(this.cart));
    }
    
    showNotification(message) {
        // Simple notification
        const notification = document.createElement('div');
        notification.textContent = message;
        notification.style.cssText = \`
            position: fixed;
            top: 20px;
            right: 20px;
            background: #27ae60;
            color: white;
            padding: 15px 20px;
            border-radius: 5px;
            z-index: 1001;
            font-weight: bold;
        \`;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            document.body.removeChild(notification);
        }, 3000);
    }
}

// Initialize the store
const store = new EcommerceStore();`
        break

      case 'calculator-app':
        files['index.html'] = `<div class="container">
        <div class="calculator">
            <div class="display">
                <input type="text" id="result" readonly>
            </div>
            <div class="buttons">
                <button class="btn clear" onclick="calculator.clear()">C</button>
                <button class="btn operator" onclick="calculator.delete()">⌫</button>
                <button class="btn operator" onclick="calculator.append('%')">%</button>
                <button class="btn operator" onclick="calculator.append('/')">/</button>
                
                <button class="btn number" onclick="calculator.append('7')">7</button>
                <button class="btn number" onclick="calculator.append('8')">8</button>
                <button class="btn number" onclick="calculator.append('9')">9</button>
                <button class="btn operator" onclick="calculator.append('*')">×</button>
                
                <button class="btn number" onclick="calculator.append('4')">4</button>
                <button class="btn number" onclick="calculator.append('5')">5</button>
                <button class="btn number" onclick="calculator.append('6')">6</button>
                <button class="btn operator" onclick="calculator.append('-')">-</button>
                
                <button class="btn number" onclick="calculator.append('1')">1</button>
                <button class="btn number" onclick="calculator.append('2')">2</button>
                <button class="btn number" onclick="calculator.append('3')">3</button>
                <button class="btn operator" onclick="calculator.append('+')">+</button>
                
                <button class="btn number zero" onclick="calculator.append('0')">0</button>
                <button class="btn number" onclick="calculator.append('.')">.</button>
                <button class="btn equals" onclick="calculator.calculate()">=</button>
            </div>
        </div>
    </div>`
        
        files['styles.css'] = `* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

.container {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 20px;
    backdrop-filter: blur(10px);
    border-radius: 20px;
    box-shadow: 0 20px 40px rgba(0,0,0,0.1);
}

.calculator {
    background: white;
    border-radius: 15px;
    padding: 20px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.2);
}

.display {
    margin-bottom: 20px;
}

#result {
    width: 100%;
    height: 80px;
    font-size: 2.5em;
    text-align: right;
    border: none;
    background: #f8f9fa;
    border-radius: 10px;
    padding: 0 20px;
    color: #333;
    font-weight: 300;
}

.buttons {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 15px;
}

.btn {
    height: 70px;
    border: none;
    border-radius: 10px;
    font-size: 1.5em;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(0,0,0,0.15);
}

.btn:active {
    transform: translateY(0);
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.number {
    background: #f8f9fa;
    color: #333;
}

.number:hover {
    background: #e9ecef;
}

.operator {
    background: #6c757d;
    color: white;
}

.operator:hover {
    background: #5a6268;
}

.clear {
    background: #dc3545;
    color: white;
}

.clear:hover {
    background: #c82333;
}

.equals {
    background: #28a745;
    color: white;
}

.equals:hover {
    background: #218838;
}

.zero {
    grid-column: span 2;
}

@media (max-width: 480px) {
    .container {
        padding: 15px;
    }
    
    .calculator {
        padding: 15px;
    }
    
    #result {
        height: 60px;
        font-size: 2em;
    }
    
    .btn {
        height: 60px;
        font-size: 1.2em;
    }
}`
        
        files['script.js'] = `class Calculator {
    constructor() {
        this.display = document.getElementById('result');
        this.currentInput = '';
        this.operator = null;
        this.previousInput = '';
        this.shouldResetDisplay = false;
    }
    
    append(value) {
        if (this.shouldResetDisplay) {
            this.display.value = '';
            this.shouldResetDisplay = false;
        }
        
        if (value === '.' && this.display.value.includes('.')) {
            return;
        }
        
        if (this.display.value === '0' && value !== '.') {
            this.display.value = value;
        } else {
            this.display.value += value;
        }
    }
    
    clear() {
        this.display.value = '0';
        this.currentInput = '';
        this.operator = null;
        this.previousInput = '';
        this.shouldResetDisplay = false;
    }
    
    delete() {
        if (this.display.value.length > 1) {
            this.display.value = this.display.value.slice(0, -1);
        } else {
            this.display.value = '0';
        }
    }
    
    setOperator(op) {
        if (this.operator && !this.shouldResetDisplay) {
            this.calculate();
        }
        
        this.previousInput = this.display.value;
        this.operator = op;
        this.shouldResetDisplay = true;
    }
    
    calculate() {
        if (this.operator && this.previousInput) {
            const prev = parseFloat(this.previousInput);
            const current = parseFloat(this.display.value);
            let result;
            
            switch (this.operator) {
                case '+':
                    result = prev + current;
                    break;
                case '-':
                    result = prev - current;
                    break;
                case '*':
                    result = prev * current;
                    break;
                case '/':
                    if (current === 0) {
                        this.display.value = 'Error';
                        return;
                    }
                    result = prev / current;
                    break;
                case '%':
                    result = prev % current;
                    break;
                default:
                    return;
            }
            
            this.display.value = result.toString();
            this.operator = null;
            this.previousInput = '';
            this.shouldResetDisplay = true;
        }
    }
    
    // Handle keyboard input
    handleKeyPress(event) {
        const key = event.key;
        
        if (key >= '0' && key <= '9' || key === '.') {
            this.append(key);
        } else if (key === '+' || key === '-' || key === '*' || key === '/') {
            this.setOperator(key);
        } else if (key === 'Enter' || key === '=') {
            this.calculate();
        } else if (key === 'Escape' || key === 'c' || key === 'C') {
            this.clear();
        } else if (key === 'Backspace') {
            this.delete();
        }
    }
}

// Initialize calculator when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    const calculator = new Calculator();
    
    document.addEventListener('keydown', (event) => {
        calculator.handleKeyPress(event);
    });

    // Prevent form submission on Enter
    document.addEventListener('keypress', (event) => {
        if (event.key === 'Enter') {
            event.preventDefault();
        }
    });
});`
        
        files['script.js'] = `class Calculator {
    constructor() {
        this.display = document.getElementById('result');
        this.currentInput = '';
        this.operator = null;
        this.previousInput = '';
        this.shouldResetDisplay = false;
    }
    
    append(value) {
        if (this.shouldResetDisplay) {
            this.display.value = '';
            this.shouldResetDisplay = false;
        }
        
        if (value === '.' && this.display.value.includes('.')) {
            return;
        }
        
        if (this.display.value === '0' && value !== '.') {
            this.display.value = value;
        } else {
            this.display.value += value;
        }
    }
    
    clear() {
        this.display.value = '0';
        this.currentInput = '';
        this.operator = null;
        this.previousInput = '';
        this.shouldResetDisplay = false;
    }
    
    delete() {
        if (this.display.value.length > 1) {
            this.display.value = this.display.value.slice(0, -1);
        } else {
            this.display.value = '0';
        }
    }
    
    setOperator(op) {
        if (this.operator && !this.shouldResetDisplay) {
            this.calculate();
        }
        
        this.previousInput = this.display.value;
        this.operator = op;
        this.shouldResetDisplay = true;
    }
    
    calculate() {
        if (this.operator && this.previousInput) {
            const prev = parseFloat(this.previousInput);
            const current = parseFloat(this.display.value);
            let result;
            
            switch (this.operator) {
                case '+':
                    result = prev + current;
                    break;
                case '-':
                    result = prev - current;
                    break;
                case '*':
                    result = prev * current;
                    break;
                case '/':
                    if (current === 0) {
                        this.display.value = 'Error';
                        return;
                    }
                    result = prev / current;
                    break;
                case '%':
                    result = prev % current;
                    break;
                default:
                    return;
            }
            
            this.display.value = result.toString();
            this.operator = null;
            this.previousInput = '';
            this.shouldResetDisplay = true;
        }
    }
    
    // Handle keyboard input
    handleKeyPress(event) {
        const key = event.key;
        
        if (key >= '0' && key <= '9' || key === '.') {
            this.append(key);
        } else if (key === '+' || key === '-' || key === '*' || key === '/') {
            this.setOperator(key);
        } else if (key === 'Enter' || key === '=') {
            this.calculate();
        } else if (key === 'Escape' || key === 'c' || key === 'C') {
            this.clear();
        } else if (key === 'Backspace') {
            this.delete();
        }
    }
}

// Initialize calculator when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    const calculator = new Calculator();
    
    document.addEventListener('keydown', (event) => {
        calculator.handleKeyPress(event);
    });
});`
        
        break

      case 'crud-app':
        files['index.html'] = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CRUD Data Management App</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <header>
            <h1>Data Management System</h1>
            <p>Create, Read, Update, and Delete records with full validation</p>
        </header>
        
        <div class="form-section">
            <h2>Add New Record</h2>
            <form id="dataForm" class="data-form">
                <div class="form-group">
                    <label for="name">Name *</label>
                    <input type="text" id="name" name="name" required>
                    <span class="error" id="nameError"></span>
                </div>
                
                <div class="form-group">
                    <label for="email">Email *</label>
                    <input type="email" id="email" name="email" required>
                    <span class="error" id="emailError"></span>
                </div>
                
                <div class="form-group">
                    <label for="age">Age *</label>
                    <input type="number" id="age" name="age" min="1" max="120" required>
                    <span class="error" id="ageError"></span>
                </div>
                
                <div class="form-group">
                    <label for="department">Department *</label>
                    <select id="department" name="department" required>
                        <option value="">Select Department</option>
                        <option value="IT">IT</option>
                        <option value="HR">HR</option>
                        <option value="Finance">Finance</option>
                        <option value="Marketing">Marketing</option>
                        <option value="Sales">Sales</option>
                    </select>
                    <span class="error" id="departmentError"></span>
                </div>
                
                <div class="form-group">
                    <label for="status">Status</label>
                    <select id="status" name="status">
                        <option value="active">Active</option>
                        <option value="inactive">Inactive</option>
                        <option value="pending">Pending</option>
                    </select>
                </div>
                
                <div class="form-actions">
                    <button type="submit" id="submitBtn">Add Record</button>
                    <button type="button" id="cancelBtn" style="display: none;">Cancel</button>
                </div>
            </form>
        </div>
        
        <div class="data-section">
            <div class="data-header">
                <h2>Records</h2>
                <div class="search-filter">
                    <input type="text" id="searchInput" placeholder="Search records...">
                    <select id="filterSelect">
                        <option value="all">All Departments</option>
                        <option value="IT">IT</option>
                        <option value="HR">HR</option>
                        <option value="Finance">Finance</option>
                        <option value="Marketing">Marketing</option>
                        <option value="Sales">Sales</option>
                    </select>
                </div>
            </div>
            
            <div class="data-table-container">
                <table id="dataTable">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Age</th>
                            <th>Department</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="dataTableBody">
                        <!-- Data will be populated here -->
                    </tbody>
                </table>
            </div>
            
            <div class="pagination">
                <button id="prevBtn" disabled>Previous</button>
                <span id="pageInfo">Page 1 of 1</span>
                <button id="nextBtn" disabled>Next</button>
            </div>
        </div>
    </div>
    
    <script src="script.js"></script>
</body>
</html>`
        
        files['styles.css'] = `* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    padding: 20px;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    background: white;
    border-radius: 20px;
    padding: 30px;
    box-shadow: 0 20px 40px rgba(0,0,0,0.1);
}

header {
    text-align: center;
    margin-bottom: 40px;
}

header h1 {
    color: #333;
    font-size: 2.5em;
    margin-bottom: 10px;
    font-weight: 300;
}

header p {
    color: #666;
    font-size: 1.1em;
}

.form-section {
    background: #f8f9fa;
    padding: 30px;
    border-radius: 15px;
    margin-bottom: 30px;
}

.form-section h2 {
    color: #333;
    margin-bottom: 20px;
    font-size: 1.5em;
}

.data-form {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
}

.form-group {
    display: flex;
    flex-direction: column;
}

.form-group label {
    font-weight: 600;
    color: #333;
    margin-bottom: 5px;
}

.form-group input,
.form-group select {
    padding: 12px;
    border: 2px solid #e1e5e9;
    border-radius: 8px;
    font-size: 16px;
    outline: none;
    transition: border-color 0.3s;
}

.form-group input:focus,
.form-group select:focus {
    border-color: #667eea;
}

.form-group input.error,
.form-group select.error {
    border-color: #e74c3c;
}

.error {
    color: #e74c3c;
    font-size: 12px;
    margin-top: 5px;
    display: none;
}

.error.show {
    display: block;
}

.form-actions {
    grid-column: 1 / -1;
    display: flex;
    gap: 10px;
    margin-top: 20px;
}

.form-actions button {
    padding: 12px 24px;
    border: none;
    border-radius: 8px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s;
}

#submitBtn {
    background: #667eea;
    color: white;
}

#submitBtn:hover {
    background: #5a6fd8;
}

#cancelBtn {
    background: #6c757d;
    color: white;
}

#cancelBtn:hover {
    background: #5a6268;
}

.data-section h2 {
    color: #333;
    margin-bottom: 20px;
    font-size: 1.5em;
}

.data-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    flex-wrap: wrap;
    gap: 15px;
}

.search-filter {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
}

.search-filter input,
.search-filter select {
    padding: 10px;
    border: 2px solid #e1e5e9;
    border-radius: 8px;
    font-size: 14px;
    outline: none;
}

.search-filter input:focus,
.search-filter select:focus {
    border-color: #667eea;
}

.data-table-container {
    overflow-x: auto;
    margin-bottom: 20px;
}

#dataTable {
    width: 100%;
    border-collapse: collapse;
    background: white;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

#dataTable th {
    background: #667eea;
    color: white;
    padding: 15px;
    text-align: left;
    font-weight: 600;
}

#dataTable td {
    padding: 15px;
    border-bottom: 1px solid #e1e5e9;
}

#dataTable tr:hover {
    background: #f8f9fa;
}

.action-buttons {
    display: flex;
    gap: 5px;
}

.action-buttons button {
    padding: 6px 12px;
    border: none;
    border-radius: 4px;
    font-size: 12px;
    cursor: pointer;
    transition: all 0.3s;
}

.edit-btn {
    background: #28a745;
    color: white;
}

.edit-btn:hover {
    background: #218838;
}

.delete-btn {
    background: #dc3545;
    color: white;
}

.delete-btn:hover {
    background: #c82333;
}

.status-badge {
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 600;
    text-transform: uppercase;
}

.status-active {
    background: #d4edda;
    color: #155724;
}

.status-inactive {
    background: #f8d7da;
    color: #721c24;
}

.status-pending {
    background: #fff3cd;
    color: #856404;
}

.pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 15px;
    margin-top: 20px;
}

.pagination button {
    padding: 8px 16px;
    border: 2px solid #667eea;
    background: white;
    color: #667eea;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.3s;
}

.pagination button:hover:not(:disabled) {
    background: #667eea;
    color: white;
}

.pagination button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

#pageInfo {
    font-weight: 600;
    color: #333;
}

@media (max-width: 768px) {
    .container {
        padding: 15px;
    }
    
    .data-form {
        grid-template-columns: 1fr;
    }
    
    .data-header {
        flex-direction: column;
        align-items: stretch;
    }
    
    .search-filter {
        justify-content: stretch;
    }
    
    .search-filter input,
    .search-filter select {
        flex: 1;
    }
    
    #dataTable {
        font-size: 14px;
    }
    
    #dataTable th,
    #dataTable td {
        padding: 10px 8px;
    }
}`
        
        files['script.js'] = `class CRUDApp {
    constructor() {
        this.data = this.loadData()
        this.currentEditId = null
        this.currentPage = 1
        this.itemsPerPage = 10
        this.filteredData = [...this.data]
        this.init()
    }
    
    init() {
        this.bindEvents()
        this.renderTable()
        this.updatePagination()
    }
    
    bindEvents() {
        // Form submission
        document.getElementById('dataForm').addEventListener('submit', (e) => {
            e.preventDefault()
            this.handleSubmit()
        })
        
        // Cancel button
        document.getElementById('cancelBtn').addEventListener('click', () => {
            this.cancelEdit()
        })
        
        // Search and filter
        document.getElementById('searchInput').addEventListener('input', () => {
            this.filterData()
        })
        
        document.getElementById('filterSelect').addEventListener('change', () => {
            this.filterData()
        })
        
        // Pagination
        document.getElementById('prevBtn').addEventListener('click', () => {
            this.previousPage()
        })
        
        document.getElementById('nextBtn').addEventListener('click', () => {
            this.nextPage()
        })
    }
    
    handleSubmit() {
        if (this.validateForm()) {
            const formData = this.getFormData()
            
            if (this.currentEditId) {
                this.updateRecord(this.currentEditId, formData)
            } else {
                this.addRecord(formData)
            }
            
            this.resetForm()
            this.renderTable()
            this.updatePagination()
            this.saveData()
        }
    }
    
    validateForm() {
        let isValid = true
        this.clearErrors()
        
        // Name validation
        const name = document.getElementById('name').value.trim()
        if (!name) {
            this.showError('nameError', 'Name is required')
            isValid = false
        } else if (name.length < 2) {
            this.showError('nameError', 'Name must be at least 2 characters')
            isValid = false
        }
        
        // Email validation
        const email = document.getElementById('email').value.trim()
        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/
        if (!email) {
            this.showError('emailError', 'Email is required')
            isValid = false
        } else if (!emailRegex.test(email)) {
            this.showError('emailError', 'Please enter a valid email')
            isValid = false
        } else if (this.isEmailDuplicate(email)) {
            this.showError('emailError', 'Email already exists')
            isValid = false
        }
        
        // Age validation
        const age = parseInt(document.getElementById('age').value)
        if (!age || age < 1 || age > 120) {
            this.showError('ageError', 'Age must be between 1 and 120')
            isValid = false
        }
        
        // Department validation
        const department = document.getElementById('department').value
        if (!department) {
            this.showError('departmentError', 'Department is required')
            isValid = false
        }
        
        return isValid
    }
    
    isEmailDuplicate(email) {
        return this.data.some(record => 
            record.email.toLowerCase() === email.toLowerCase() && 
            record.id !== this.currentEditId
        )
    }
    
    showError(elementId, message) {
        const errorElement = document.getElementById(elementId)
        errorElement.textContent = message
        errorElement.classList.add('show')
        
        const inputElement = errorElement.previousElementSibling
        inputElement.classList.add('error')
    }
    
    clearErrors() {
        document.querySelectorAll('.error').forEach(error => {
            error.classList.remove('show')
        })
        
        document.querySelectorAll('input, select').forEach(input => {
            input.classList.remove('error')
        })
    }
    
    getFormData() {
        return {
            name: document.getElementById('name').value.trim(),
            email: document.getElementById('email').value.trim(),
            age: parseInt(document.getElementById('age').value),
            department: document.getElementById('department').value,
            status: document.getElementById('status').value
        }
    }
    
    addRecord(data) {
        const newRecord = {
            id: Date.now(),
            ...data,
            createdAt: new Date().toISOString()
        }
        
        this.data.unshift(newRecord)
        this.filterData()
        
        // Show success message
        this.showNotification('Record added successfully!', 'success')
    }
    
    updateRecord(id, data) {
        const index = this.data.findIndex(record => record.id === id)
        if (index !== -1) {
            this.data[index] = {
                ...this.data[index],
                ...data,
                updatedAt: new Date().toISOString()
            }
            this.filterData()
            this.showNotification('Record updated successfully!', 'success')
        }
    }
    
    deleteRecord(id) {
        if (confirm('Are you sure you want to delete this record?')) {
            this.data = this.data.filter(record => record.id !== id)
            this.filterData()
            this.renderTable()
            this.updatePagination()
            this.saveData()
            this.showNotification('Record deleted successfully!', 'success')
        }
    }
    
    editRecord(id) {
        const record = this.data.find(r => r.id === id)
        if (record) {
            this.currentEditId = id
            document.getElementById('name').value = record.name
            document.getElementById('email').value = record.email
            document.getElementById('age').value = record.age
            document.getElementById('department').value = record.department
            document.getElementById('status').value = record.status
            
            document.getElementById('submitBtn').textContent = 'Update Record'
            document.getElementById('cancelBtn').style.display = 'inline-block'
            
            // Scroll to form
            document.querySelector('.form-section').scrollIntoView({ behavior: 'smooth' })
        }
    }
    
    cancelEdit() {
        this.currentEditId = null
        this.resetForm()
    }
    
    resetForm() {
        document.getElementById('dataForm').reset()
        document.getElementById('submitBtn').textContent = 'Add Record'
        document.getElementById('cancelBtn').style.display = 'none'
        this.clearErrors()
        this.currentEditId = null
    }
    
    filterData() {
        const searchTerm = document.getElementById('searchInput').value.toLowerCase()
        const filterDept = document.getElementById('filterSelect').value
        
        this.filteredData = this.data.filter(record => {
            const matchesSearch = !searchTerm || 
                record.name.toLowerCase().includes(searchTerm) ||
                record.email.toLowerCase().includes(searchTerm) ||
                record.department.toLowerCase().includes(searchTerm)
            
            const matchesFilter = filterDept === 'all' || record.department === filterDept
            
            return matchesSearch && matchesFilter
        })
        
        this.currentPage = 1
        this.renderTable()
        this.updatePagination()
    }
    
    renderTable() {
        const tbody = document.getElementById('dataTableBody')
        const startIndex = (this.currentPage - 1) * this.itemsPerPage
        const endIndex = startIndex + this.itemsPerPage
        const pageData = this.filteredData.slice(startIndex, endIndex)
        
        tbody.innerHTML = pageData.map(record => \`
            <tr>
                <td>\${record.id}</td>
                <td>\${record.name}</td>
                <td>\${record.email}</td>
                <td>\${record.age}</td>
                <td>\${record.department}</td>
                <td><span class="status-badge status-\${record.status}">\${record.status}</span></td>
                <td>
                    <div class="action-buttons">
                        <button class="edit-btn" onclick="crudApp.editRecord(\${record.id})">Edit</button>
                        <button class="delete-btn" onclick="crudApp.deleteRecord(\${record.id})">Delete</button>
                    </div>
                </td>
            </tr>
        \`).join('')
        
        if (pageData.length === 0) {
            tbody.innerHTML = \`
                <tr>
                    <td colspan="7" style="text-align: center; padding: 40px; color: #666;">
                        No records found
                    </td>
                </tr>
            \`
        }
    }
    
    updatePagination() {
        const totalPages = Math.ceil(this.filteredData.length / this.itemsPerPage)
        const pageInfo = document.getElementById('pageInfo')
        const prevBtn = document.getElementById('prevBtn')
        const nextBtn = document.getElementById('nextBtn')
        
        pageInfo.textContent = \`Page \${this.currentPage} of \${totalPages}\`
        prevBtn.disabled = this.currentPage === 1
        nextBtn.disabled = this.currentPage === totalPages || totalPages === 0
    }
    
    previousPage() {
        if (this.currentPage > 1) {
            this.currentPage--
            this.renderTable()
            this.updatePagination()
        }
    }
    
    nextPage() {
        const totalPages = Math.ceil(this.filteredData.length / this.itemsPerPage)
        if (this.currentPage < totalPages) {
            this.currentPage++
            this.renderTable()
            this.updatePagination()
        }
    }
    
    showNotification(message, type = 'info') {
        // Create notification element
        const notification = document.createElement('div')
        notification.className = \`notification notification-\${type}\`
        notification.textContent = message
        notification.style.cssText = \`
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 600;
            z-index: 1000;
            animation: slideIn 0.3s ease;
            background: \${type === 'success' ? '#28a745' : type === 'error' ? '#dc3545' : '#17a2b8'};
        \`
        
        document.body.appendChild(notification)
        
        // Remove after 3 seconds
        setTimeout(() => {
            notification.remove()
        }, 3000)
    }
    
    loadData() {
        const saved = localStorage.getItem('crudAppData')
        if (saved) {
            return JSON.parse(saved)
        }
        
        // Return sample data if no saved data
        return [
            {
                id: 1,
                name: 'John Doe',
                email: 'john@example.com',
                age: 30,
                department: 'IT',
                status: 'active',
                createdAt: new Date().toISOString()
            },
            {
                id: 2,
                name: 'Jane Smith',
                email: 'jane@example.com',
                age: 25,
                department: 'HR',
                status: 'active',
                createdAt: new Date().toISOString()
            },
            {
                id: 3,
                name: 'Bob Johnson',
                email: 'bob@example.com',
                age: 35,
                department: 'Finance',
                status: 'pending',
                createdAt: new Date().toISOString()
            }
        ]
    }
    
    saveData() {
        localStorage.setItem('crudAppData', JSON.stringify(this.data))
    }
}

// Add CSS animation
const style = document.createElement('style')
style.textContent = \`
    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
\`
document.head.appendChild(style)

// Initialize the app when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    const crudApp = new CRUDApp();
});`
        break

      case 'weather-app':
        files['index.html'] = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather App</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <header>
            <h1>Weather App</h1>
            <div class="search-container">
                <input type="text" id="cityInput" placeholder="Enter city name..." />
                <button id="searchButton">Search</button>
            </div>
        </header>
        
        <main>
            <div class="weather-card" id="weatherCard">
                <div class="weather-icon" id="weatherIcon">☀️</div>
                <div class="temperature" id="temperature">--°C</div>
                <div class="description" id="description">Enter a city to get weather</div>
                <div class="location" id="location">--</div>
                
                <div class="details">
                    <div class="detail-item">
                        <span class="label">Feels Like</span>
                        <span class="value" id="feelsLike">--°C</span>
                    </div>
                    <div class="detail-item">
                        <span class="label">Humidity</span>
                        <span class="value" id="humidity">--%</span>
                    </div>
                    <div class="detail-item">
                        <span class="label">Wind Speed</span>
                        <span class="value" id="windSpeed">-- km/h</span>
                    </div>
                    <div class="detail-item">
                        <span class="label">Pressure</span>
                        <span class="value" id="pressure">-- hPa</span>
                    </div>
                </div>
            </div>
            
            <div class="forecast" id="forecast">
                <!-- Forecast items will be added here -->
            </div>
        </main>
    </div>
    
    <script src="script.js"></script>
</body>
</html>`
        
        files['styles.css'] = `* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
    min-height: 100vh;
    color: #333;
}

.container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
}

header {
    text-align: center;
    margin-bottom: 30px;
}

h1 {
    color: white;
    font-size: 2.5em;
    margin-bottom: 20px;
    font-weight: 300;
}

.search-container {
    display: flex;
    gap: 10px;
    justify-content: center;
    max-width: 400px;
    margin: 0 auto;
}

#cityInput {
    flex: 1;
    padding: 15px;
    border: none;
    border-radius: 25px;
    font-size: 16px;
    outline: none;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
}

#searchButton {
    padding: 15px 25px;
    background: #00b894;
    color: white;
    border: none;
    border-radius: 25px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: background 0.3s;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
}

#searchButton:hover {
    background: #00a085;
}

.weather-card {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 20px;
    padding: 30px;
    text-align: center;
    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    backdrop-filter: blur(10px);
    margin-bottom: 30px;
}

.weather-icon {
    font-size: 4em;
    margin-bottom: 20px;
}

.temperature {
    font-size: 3em;
    font-weight: 300;
    color: #2d3436;
    margin-bottom: 10px;
}

.description {
    font-size: 1.2em;
    color: #636e72;
    margin-bottom: 20px;
    text-transform: capitalize;
}

.location {
    font-size: 1.1em;
    color: #74b9ff;
    font-weight: 600;
    margin-bottom: 30px;
}

.details {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 20px;
    margin-top: 30px;
}

.detail-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 15px;
    background: rgba(116, 185, 255, 0.1);
    border-radius: 10px;
}

.detail-item .label {
    font-size: 0.9em;
    color: #636e72;
    margin-bottom: 5px;
}

.detail-item .value {
    font-size: 1.2em;
    font-weight: 600;
    color: #2d3436;
}

.forecast {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 15px;
}

.forecast-item {
    background: rgba(255, 255, 255, 0.9);
    border-radius: 15px;
    padding: 20px;
    text-align: center;
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
}

.forecast-day {
    font-weight: 600;
    color: #2d3436;
    margin-bottom: 10px;
}

.forecast-icon {
    font-size: 2em;
    margin-bottom: 10px;
}

.forecast-temp {
    color: #74b9ff;
    font-weight: 600;
}

.loading {
    opacity: 0.6;
    pointer-events: none;
}

.error {
    color: #e17055;
    background: rgba(225, 112, 85, 0.1);
    padding: 15px;
    border-radius: 10px;
    margin-top: 20px;
}

@media (max-width: 600px) {
    .container {
        padding: 15px;
    }
    
    h1 {
        font-size: 2em;
    }
    
    .search-container {
        flex-direction: column;
    }
    
    .details {
        grid-template-columns: repeat(2, 1fr);
    }
    
    .forecast {
        grid-template-columns: repeat(2, 1fr);
    }
}`
        
        files['script.js'] = `class WeatherApp {
    constructor() {
        this.apiKey = 'demo'; // In a real app, you'd use a real API key
        this.currentWeather = null;
        this.forecast = [];
        this.init();
    }
    
    init() {
        this.bindEvents();
        this.loadDefaultWeather();
    }
    
    bindEvents() {
        const searchButton = document.getElementById('searchButton');
        const cityInput = document.getElementById('cityInput');
        
        if (!searchButton) {
            console.error('Search button not found!');
            return;
        }
        
        if (!cityInput) {
            console.error('City input not found!');
            return;
        }
        
        console.log('Binding weather app events...');
        searchButton.addEventListener('click', () => {
            console.log('Search button clicked!');
            this.searchWeather();
        });
        
        cityInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                console.log('Enter key pressed!');
                this.searchWeather();
            }
        });
    }
    
    async searchWeather() {
        console.log('searchWeather called');
        const city = document.getElementById('cityInput').value.trim();
        console.log('City input value:', city);
        
        if (!city) {
            console.log('No city entered');
            this.showError('Please enter a city name');
            return;
        }
        
        console.log('Starting weather search for:', city);
        this.showLoading();
        try {
            // Simulate API call with demo data
            await this.simulateAPICall();
            this.updateWeatherDisplay(city);
            console.log('Weather search completed successfully');
        } catch (error) {
            console.error('Weather search failed:', error);
            this.showError('Failed to fetch weather data');
        } finally {
            this.hideLoading();
        }
    }
    
    async simulateAPICall() {
        // Simulate API delay
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Generate demo weather data
        const cities = ['New York', 'London', 'Tokyo', 'Paris', 'Sydney'];
        const conditions = ['sunny', 'cloudy', 'rainy', 'snowy', 'partly cloudy'];
        const temperatures = Array.from({length: 20}, (_, i) => Math.floor(Math.random() * 30) + 5);
        
        this.currentWeather = {
            temperature: temperatures[0],
            condition: conditions[Math.floor(Math.random() * conditions.length)],
            feelsLike: temperatures[0] + Math.floor(Math.random() * 6) - 3,
            humidity: Math.floor(Math.random() * 40) + 40,
            windSpeed: Math.floor(Math.random() * 20) + 5,
            pressure: Math.floor(Math.random() * 50) + 1000
        };
        
        // Generate 5-day forecast
        this.forecast = Array.from({length: 5}, (_, i) => ({
            day: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'][i],
            icon: ['☀️', '⛅', '🌧️', '❄️', '🌤️'][Math.floor(Math.random() * 5)],
            temp: temperatures[i + 1]
        }));
    }
    
    updateWeatherDisplay(city) {
        const weather = this.currentWeather;
        
        // Update main weather display
        document.getElementById('temperature').textContent = \`\${weather.temperature}°C\`;
        document.getElementById('description').textContent = weather.condition;
        document.getElementById('location').textContent = city;
        document.getElementById('feelsLike').textContent = \`\${weather.feelsLike}°C\`;
        document.getElementById('humidity').textContent = \`\${weather.humidity}%\`;
        document.getElementById('windSpeed').textContent = \`\${weather.windSpeed} km/h\`;
        document.getElementById('pressure').textContent = \`\${weather.pressure} hPa\`;
        
        // Update weather icon
        const iconMap = {
            'sunny': '☀️',
            'cloudy': '☁️',
            'rainy': '🌧️',
            'snowy': '❄️',
            'partly cloudy': '⛅'
        };
        document.getElementById('weatherIcon').textContent = iconMap[weather.condition] || '☀️';
        
        // Update forecast
        this.updateForecast();
        
        // Clear input
        document.getElementById('cityInput').value = '';
    }
    
    updateForecast() {
        const forecastContainer = document.getElementById('forecast');
        forecastContainer.innerHTML = this.forecast.map(day => \`
            <div class="forecast-item">
                <div class="forecast-day">\${day.day}</div>
                <div class="forecast-icon">\${day.icon}</div>
                <div class="forecast-temp">\${day.temp}°C</div>
            </div>
        \`).join('');
    }
    
    loadDefaultWeather() {
        // Load default weather for demo
        this.simulateAPICall().then(() => {
            this.updateWeatherDisplay('New York');
        });
    }
    
    showLoading() {
        document.getElementById('weatherCard').classList.add('loading');
        document.getElementById('searchButton').textContent = 'Searching...';
        document.getElementById('searchButton').disabled = true;
    }
    
    hideLoading() {
        document.getElementById('weatherCard').classList.remove('loading');
        document.getElementById('searchButton').textContent = 'Search';
        document.getElementById('searchButton').disabled = false;
    }
    
    showError(message) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error';
        errorDiv.textContent = message;
        
        const weatherCard = document.getElementById('weatherCard');
        weatherCard.appendChild(errorDiv);
        
        setTimeout(() => {
            if (errorDiv.parentNode) {
                errorDiv.parentNode.removeChild(errorDiv);
            }
        }, 5000);
    }
}

// Initialize the weather app when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    const weatherApp = new WeatherApp();
});`
        break

      default:
        // Fallback template
        files['index.html'] = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DreamBuild App</title>
</head>
<body>
    <h1>Welcome to DreamBuild!</h1>
    <p>Your application has been generated successfully.</p>
</body>
</html>`
    }

    return files
  }

  // Generate code using local AI or fallback
  async generateCode(prompt, context = {}) {
    console.log('🚀 Starting code generation for prompt:', prompt)
    
    try {
      // Check cache first
      const cachedResponse = this.getCachedResponse(prompt, context)
      if (cachedResponse) {
        return cachedResponse
      }
      
      // In production, skip local AI and use fallback directly
      if (this.isProduction && !this.isLocalhost) {
        console.log('🌐 Production environment - using template fallback')
        const response = await this.createFallbackResponse(prompt, context)
        this.setCachedResponse(prompt, context, response)
        return response
      }
      
      // Try to use local AI if available
      if (this.isHealthy) {
        return await this.generateWithLocalAI(prompt, context)
      } else {
        console.log('⚠️ Local AI not available, using template fallback')
        const response = await this.createFallbackResponse(prompt, context)
        this.setCachedResponse(prompt, context, response)
        return response
      }
    } catch (error) {
      console.error('❌ Code generation failed:', error)
      const response = await this.createFallbackResponse(prompt, context)
      this.setCachedResponse(prompt, context, response)
      return response
    }
  }

  // Generate with local AI
  async generateWithLocalAI(prompt, context = {}) {
    // Check if this is a general question first
    if (this.isGeneralQuestion(prompt)) {
      console.log('❓ General question detected, providing conversational response...')
      return this.createConversationalResponse(prompt, context)
    }
    
    const model = this.getBestAvailableModel()
    const systemPrompt = this.createSystemPrompt(context)
    
    const requestBody = {
      model: model,
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: prompt }
      ],
      stream: false,
      options: {
        temperature: 0.7,
        top_p: 0.9,
        max_tokens: 4000
      }
    }

    try {
      const response = await axios.post(`${this.baseURL}/chat`, requestBody, {
        timeout: 30000,
        headers: {
          'Content-Type': 'application/json'
        }
      })

      if (response.data && response.data.message && response.data.message.content) {
        const content = response.data.message.content
        return await this.parseAIResponse(content, prompt)
      } else {
        throw new Error('Invalid response from local AI')
      }
    } catch (error) {
      console.error('❌ Local AI generation failed:', error)
      throw error
    }
  }

  // Get best available model
  getBestAvailableModel() {
    const healthyModels = this.getHealthyModels()
    if (healthyModels.includes('codellama:7b')) return 'codellama:7b'
    if (healthyModels.includes('codellama:13b')) return 'codellama:13b'
    if (healthyModels.includes('codellama:34b')) return 'codellama:34b'
    return healthyModels[0] || 'codellama:7b'
  }

  // Create system prompt
  createSystemPrompt(context = {}) {
    return `You are an expert software developer and code generator. Generate complete, working applications based on user requests.

Guidelines:
1. Always generate complete, runnable code
2. Include all necessary files (HTML, CSS, JS, etc.)
3. Use modern best practices
4. Make the code clean and well-commented
5. Ensure the application is functional and user-friendly

Return your response as a JSON object with this structure:
{
  "files": {
    "filename1.ext": "file content here",
    "filename2.ext": "file content here"
  },
  "description": "Brief description of what was generated",
  "instructions": "How to run or use the generated code"
}

Generate practical, working applications that users can immediately use.`
  }

  // Parse AI response
  async parseAIResponse(content, originalPrompt) {
    try {
      // Try to extract JSON from the response
      const jsonMatch = content.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0])
        if (parsed.files) {
          return parsed.files
        }
      }
      
      // If no valid JSON, create fallback response
      return await this.createFallbackResponse(originalPrompt, {})
    } catch (error) {
      console.error('❌ Failed to parse AI response:', error)
      return await this.createFallbackResponse(originalPrompt, {})
    }
  }

  // Check if the prompt is a general question (not a code generation request)
  isGeneralQuestion(prompt) {
    // Ensure prompt is a string and handle null/undefined
    if (prompt === null || prompt === undefined) {
      return false
    }
    
    // Handle object input (extract prompt property)
    let promptString
    if (typeof prompt === 'object' && prompt.prompt) {
      promptString = prompt.prompt
    } else if (typeof prompt === 'string') {
      promptString = prompt
    } else {
      promptString = String(prompt)
    }
    
    const lowerPrompt = promptString.toLowerCase()
    
    // General question indicators
    const generalQuestionKeywords = [
      'what is', 'what are', 'what was', 'what will', 'what does', 'what do',
      'how is', 'how are', 'how was', 'how will', 'how does', 'how do',
      'when is', 'when are', 'when was', 'when will', 'when does', 'when do',
      'where is', 'where are', 'where was', 'where will', 'where does', 'where do',
      'why is', 'why are', 'why was', 'why will', 'why does', 'why do',
      'who is', 'who are', 'who was', 'who will', 'who does', 'who do',
      'weather', 'temperature', 'forecast', 'climate', 'rain', 'sunny', 'cloudy',
      'news', 'current events', 'today', 'recent', 'latest', 'breaking',
      'cook', 'recipe', 'food', 'ingredients', 'cooking', 'bake', 'fry', 'boil',
      'travel', 'vacation', 'destination', 'hotel', 'flight', 'trip', 'visit',
      'health', 'medicine', 'exercise', 'fitness', 'doctor', 'hospital', 'sick',
      'education', 'learn', 'study', 'school', 'university', 'college', 'course',
      'science', 'research', 'study', 'theory', 'experiment', 'discovery',
      'history', 'historical', 'past', 'ancient', 'century', 'war', 'battle',
      'business', 'finance', 'economy', 'market', 'stock', 'investment', 'money',
      'sports', 'game', 'team', 'player', 'football', 'basketball', 'soccer',
      'entertainment', 'movie', 'music', 'book', 'film', 'song', 'album',
      'explain', 'tell me about', 'describe', 'define', 'meaning', 'definition',
      'help me understand', 'can you explain', 'what does it mean', 'how does it work',
      'is it', 'are you', 'do you', 'can you', 'will you', 'would you',
      'should i', 'could i', 'would i', 'might i', 'may i'
    ]
    
    // Code generation indicators
    const codeGenerationKeywords = [
      'build', 'create', 'make', 'develop', 'generate', 'code',
      'app', 'application', 'website', 'web app', 'mobile app',
      'component', 'function', 'class', 'module', 'library',
      'api', 'database', 'server', 'backend', 'frontend',
      'react', 'vue', 'angular', 'node', 'python', 'javascript',
      'html', 'css', 'js', 'ts', 'jsx', 'tsx',
      'todo', 'calculator', 'dashboard', 'portfolio', 'blog',
      'ecommerce', 'shop', 'store', 'landing page'
    ]
    
    // Check for general question patterns
    const hasGeneralKeywords = generalQuestionKeywords.some(keyword => 
      lowerPrompt.includes(keyword)
    )
    
    // Check for code generation patterns
    const hasCodeKeywords = codeGenerationKeywords.some(keyword => 
      lowerPrompt.includes(keyword)
    )
    
    // If it has code keywords, it's definitely a code generation request
    if (hasCodeKeywords) {
      return false
    }
    
    // If it has general keywords, it's likely a general question
    if (hasGeneralKeywords) {
      return true
    }
    
    // If it starts with question words, it's likely a general question
    if (lowerPrompt.startsWith('what') || lowerPrompt.startsWith('how') || 
        lowerPrompt.startsWith('when') || lowerPrompt.startsWith('where') || 
        lowerPrompt.startsWith('why') || lowerPrompt.startsWith('who') ||
        lowerPrompt.startsWith('is') || lowerPrompt.startsWith('are') ||
        lowerPrompt.startsWith('do') || lowerPrompt.startsWith('does') ||
        lowerPrompt.startsWith('can') || lowerPrompt.startsWith('will') ||
        lowerPrompt.startsWith('would') || lowerPrompt.startsWith('should') ||
        lowerPrompt.startsWith('could') || lowerPrompt.startsWith('explain') ||
        lowerPrompt.startsWith('tell') || lowerPrompt.startsWith('describe') ||
        lowerPrompt.startsWith('define')) {
      return true
    }
    
    // If it ends with a question mark, it's likely a general question
    if (lowerPrompt.endsWith('?')) {
      return true
    }
    
    // If it contains question patterns, it's likely a general question
    if (lowerPrompt.includes('?') && (
        lowerPrompt.includes('what') || lowerPrompt.includes('how') ||
        lowerPrompt.includes('when') || lowerPrompt.includes('where') ||
        lowerPrompt.includes('why') || lowerPrompt.includes('who') ||
        lowerPrompt.includes('is') || lowerPrompt.includes('are') ||
        lowerPrompt.includes('do') || lowerPrompt.includes('does') ||
        lowerPrompt.includes('can') || lowerPrompt.includes('will') ||
        lowerPrompt.includes('would') || lowerPrompt.includes('should') ||
        lowerPrompt.includes('could') || lowerPrompt.includes('explain') ||
        lowerPrompt.includes('tell') || lowerPrompt.includes('describe') ||
        lowerPrompt.includes('define')
      )) {
      return true
    }
    
    return false
  }

  // Create conversational response for general questions
  createConversationalResponse(prompt, context = {}) {
    // Handle object input (extract prompt property)
    let promptString
    if (typeof prompt === 'object' && prompt.prompt) {
      promptString = prompt.prompt
    } else if (typeof prompt === 'string') {
      promptString = prompt
    } else if (prompt === null || prompt === undefined) {
      promptString = 'general question'
    } else {
      promptString = String(prompt)
    }
    const lowerPrompt = promptString.toLowerCase()
    
    // Weather questions
    if (lowerPrompt.includes('weather') || lowerPrompt.includes('temperature') || lowerPrompt.includes('forecast')) {
      return {
        type: 'conversational_response',
        message: `I'd be happy to help with weather information for your location. However, I don't have access to real-time weather data. For current weather conditions, I recommend checking a reliable weather service like Weather.com, AccuWeather, or your local weather app.`,
        summary: 'Weather information request',
        details: [
          'Weather data requires real-time access to meteorological services',
          'Recommended sources: Weather.com, AccuWeather, local weather apps',
          'For accurate forecasts, use official weather services'
        ],
        sources: ['Weather.com', 'AccuWeather', 'National Weather Service'],
        prompt: prompt,
        generatedAt: new Date().toISOString(),
        context: context
      }
    }
    
    // Cooking questions
    if (lowerPrompt.includes('cook') || lowerPrompt.includes('recipe') || lowerPrompt.includes('food')) {
      return {
        type: 'conversational_response',
        message: `I can help with cooking questions! For recipes and cooking techniques, I recommend checking reliable cooking websites like AllRecipes.com, Food Network, or Serious Eats. These sources provide tested recipes and expert cooking advice.`,
        summary: 'Cooking and recipe information',
        details: [
          'Cooking requires specific recipes and techniques',
          'Recommended sources: AllRecipes.com, Food Network, Serious Eats',
          'Always follow food safety guidelines when cooking'
        ],
        sources: ['AllRecipes.com', 'Food Network', 'Serious Eats'],
        prompt: prompt,
        generatedAt: new Date().toISOString(),
        context: context
      }
    }
    
    // Geography questions
    if (lowerPrompt.includes('capital') || lowerPrompt.includes('country') || lowerPrompt.includes('city')) {
      return {
        type: 'conversational_response',
        message: `I can help with geography questions! For accurate and up-to-date geographical information, I recommend checking reliable sources like National Geographic, World Atlas, or official government websites.`,
        summary: 'Geography information',
        details: [
          'Geographical information changes over time',
          'Recommended sources: National Geographic, World Atlas, government sites',
          'For current data, check official sources'
        ],
        sources: ['National Geographic', 'World Atlas', 'Government websites'],
        prompt: prompt,
        generatedAt: new Date().toISOString(),
        context: context
      }
    }
    
    // General information questions
    return {
      type: 'conversational_response',
      message: `I understand you're asking about "${prompt}". While I'm primarily designed for code generation and development tasks, I can provide general information when I have access to current data. For the most accurate and up-to-date information, I recommend checking reliable sources or using a general-purpose AI assistant.`,
      summary: 'General information request',
      details: [
        'This appears to be a general knowledge question',
        'For current information, check reliable sources',
        'I can help with code generation and development tasks'
      ],
      sources: ['Wikipedia', 'Reliable news sources', 'Official websites'],
      prompt: prompt,
      generatedAt: new Date().toISOString(),
      context: context
    }
  }

  // Create fallback response
  async createFallbackResponse(prompt, context = {}) {
    console.log('🔄 Creating fallback response for prompt:', prompt)
    
    // Handle object input (extract prompt property)
    let promptString
    if (typeof prompt === 'object' && prompt.prompt) {
      promptString = prompt.prompt
    } else if (typeof prompt === 'string') {
      promptString = prompt
    } else if (prompt === null || prompt === undefined) {
      promptString = 'web application'
    } else {
      promptString = String(prompt)
    }
    
    // Check if this is a general question (not a code generation request)
    if (this.isGeneralQuestion(promptString)) {
      console.log('❓ General question detected, providing conversational response...')
      return this.createConversationalResponse(promptString, context)
    }
    
    // For code generation, return a proper response structure
    const fallbackCode = await this.generateFallbackCode(promptString, context)
    
    // Generate random app name
    const appName = appNamingService.generateAppName(promptString, context)
    
    // Validate that all features are functional
    const validationResults = this.validateAppFeatures(fallbackCode, promptString)
    
    return {
      type: 'code_generation',
      files: fallbackCode,
      projectName: appName,
      message: `I've generated "${appName}" - a ${this.extractAppType(promptString)} application based on your request. ${validationResults.message}`,
      prompt: promptString,
      generatedAt: new Date().toISOString(),
      context: context,
      validation: validationResults
    }
  }

  // Validate that all app features are functional
  validateAppFeatures(files, prompt) {
    const validationResults = {
      isFunctional: true,
      features: [],
      message: 'This is a fully functional template with working features:',
      issues: []
    }

    // Check for essential files
    if (!files['index.html']) {
      validationResults.issues.push('Missing index.html')
      validationResults.isFunctional = false
    }

    // Check for JavaScript functionality
    if (files['script.js']) {
      const script = files['script.js']
      
      // Check for event listeners
      if (script.includes('addEventListener')) {
        validationResults.features.push('Interactive buttons and inputs')
      }
      
      // Check for data persistence
      if (script.includes('localStorage') || script.includes('sessionStorage')) {
        validationResults.features.push('Data persistence')
      }
      
      // Check for API calls or async functionality
      if (script.includes('fetch') || script.includes('async') || script.includes('await')) {
        validationResults.features.push('API integration')
      }
      
      // Check for form handling
      if (script.includes('form') || script.includes('submit')) {
        validationResults.features.push('Form handling')
      }
      
      // Check for dynamic content updates
      if (script.includes('innerHTML') || script.includes('textContent')) {
        validationResults.features.push('Dynamic content updates')
      }
    }

    // Check for CSS styling
    if (files['styles.css']) {
      const styles = files['styles.css']
      
      if (styles.includes('@media')) {
        validationResults.features.push('Responsive design')
      }
      
      if (styles.includes('hover') || styles.includes(':hover')) {
        validationResults.features.push('Interactive styling')
      }
      
      if (styles.includes('animation') || styles.includes('transition')) {
        validationResults.features.push('Smooth animations')
      }
    }

    // Generate appropriate message
    if (validationResults.features.length > 0) {
      validationResults.message += ' ' + validationResults.features.join(', ') + '.'
    } else {
      validationResults.message += ' All core functionality is implemented and ready to use.'
    }

    if (validationResults.issues.length > 0) {
      validationResults.message += ' Note: ' + validationResults.issues.join(', ') + '.'
    }

    return validationResults
  }
  
  // Generate fallback code based on prompt
  async generateFallbackCode(prompt, context = {}) {
    console.log('🔍 generateFallbackCode called with prompt:', prompt)
    
    // Handle object input (extract prompt property)
    let promptString
    if (typeof prompt === 'object' && prompt.prompt) {
      promptString = prompt.prompt
    } else if (typeof prompt === 'string') {
      promptString = prompt
    } else if (prompt === null || prompt === undefined) {
      promptString = 'web application'
    } else {
      promptString = String(prompt)
    }
    
    // Ensure promptString is a string
    if (typeof promptString !== 'string') {
      promptString = String(promptString)
    }
    
    console.log('🔍 Processed prompt string:', promptString)
    
    // Analyze prompt to determine template
    const lowerPrompt = promptString.toLowerCase()
    console.log('🔍 Lowercase prompt:', lowerPrompt)
    
    if (lowerPrompt.includes('dashboard') || lowerPrompt.includes('analytics')) {
      console.log('🔍 Matched dashboard template')
      return await this.generateTemplateById('react-dashboard', context)
    } else if (lowerPrompt.includes('todo') || lowerPrompt.includes('task')) {
      console.log('🔍 Matched todo template')
      return await this.generateTemplateById('todo-app', context)
    } else if (lowerPrompt.includes('crud') || lowerPrompt.includes('data management') || lowerPrompt.includes('admin panel')) {
      console.log('🔍 Matched crud template')
      return await this.generateTemplateById('crud-app', context)
    } else if (lowerPrompt.includes('ecommerce') || lowerPrompt.includes('store') || lowerPrompt.includes('shop')) {
      console.log('🔍 Matched ecommerce template')
      return await this.generateTemplateById('ecommerce-store', context)
    } else if (lowerPrompt.includes('calculator') || lowerPrompt.includes('calc')) {
      console.log('🔍 Matched calculator template')
      return await this.generateTemplateById('calculator-app', context)
    } else if (lowerPrompt.includes('weather')) {
      console.log('🔍 Matched weather template')
      return await this.generateTemplateById('weather-app', context)
    } else if (lowerPrompt.includes('react') || lowerPrompt.includes('component')) {
      console.log('🔍 Matched React template')
      return await this.generateEnhancedReactTemplate(promptString, context)
    } else if (lowerPrompt.includes('python') || lowerPrompt.includes('flask') || lowerPrompt.includes('django')) {
      console.log('🔍 Matched Python template')
      return await this.generateEnhancedPythonTemplate(promptString, context)
    } else if (lowerPrompt.includes('html') || lowerPrompt.includes('css') || lowerPrompt.includes('landing page')) {
      console.log('🔍 Matched HTML/CSS template')
      return htmlCssEnhancementService.getTemplate('landingPage')
    } else if (lowerPrompt.includes('portfolio')) {
      console.log('🔍 Matched Portfolio template')
      return htmlCssEnhancementService.getTemplate('portfolio')
    } else {
      console.log('🔍 No template matched, using enhanced default')
      return await this.generateEnhancedDefaultTemplate(promptString, context)
    }
  }

  // Legacy default template (kept for reference)
  generateLegacyDefaultTemplate(promptString) {
    return {
        'index.html': `<div class="header">
        <h1>Welcome to Your DreamBuild App!</h1>
        <p>Generated based on: "${promptString}"</p>
    </div>
    
    <div class="content">
        <h2>Your Application</h2>
        <p>This is a starter application generated by DreamBuild. You can customize it further by editing the files in your project.</p>
        
        <h3>Features:</h3>
        <ul>
            <li>Responsive design</li>
            <li>Modern styling</li>
            <li>Clean code structure</li>
        </ul>
        
        <p>To run this application, simply open the index.html file in your web browser.</p>
    </div>
<style>
    .header {
        text-align: center;
        margin-bottom: 2rem;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }
    .content {
        background: #f8f9fa;
        padding: 2rem;
        border-radius: 8px;
        border: 1px solid #e9ecef;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        max-width: 800px;
        margin: 0 auto;
        line-height: 1.6;
    }
</style>`,
        'styles.css': `/* Additional styles for your DreamBuild app */

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
}

.button {
    background: #007bff;
    color: white;
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1rem;
    transition: background-color 0.3s ease;
}

.button:hover {
    background: #0056b3;
}

.card {
    background: white;
    padding: 1.5rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin-bottom: 1rem;
}`,
        'package.json': `{
  "name": "dreambuild-app",
  "version": "1.0.0",
  "description": "Generated by DreamBuild",
  "main": "index.html",
  "scripts": {
    "start": "python -m http.server 8000",
    "dev": "python -m http.server 8000"
  },
  "keywords": ["dreambuild", "generated", "web-app"],
  "author": "DreamBuild",
  "license": "MIT"
}`
      }
    }
  }
  
  // Extract app type from prompt
  extractAppType(prompt) {
    const lowerPrompt = prompt.toLowerCase()
    if (lowerPrompt.includes('todo')) return 'todo list'
    if (lowerPrompt.includes('calculator')) return 'calculator'
    if (lowerPrompt.includes('dashboard')) return 'dashboard'
    if (lowerPrompt.includes('ecommerce')) return 'e-commerce store'
    if (lowerPrompt.includes('weather')) return 'weather app'
    if (lowerPrompt.includes('blog')) return 'blog'
    return 'web application'
  }

  // Enhanced template generation methods for better code quality
  async generateEnhancedReactTemplate(prompt, context) {
    console.log('⚛️ Generating enhanced React template for:', prompt)
    
    const appName = prompt.split(' ')[0] || 'ReactApp'
    
    return {
      'package.json': JSON.stringify({
        name: appName.toLowerCase(),
        version: '1.0.0',
        description: `A React application generated by DreamBuild: ${prompt}`,
        main: 'src/index.js',
        scripts: {
          start: 'react-scripts start',
          build: 'react-scripts build',
          test: 'react-scripts test',
          eject: 'react-scripts eject'
        },
        dependencies: {
          'react': '^18.2.0',
          'react-dom': '^18.2.0',
          'react-scripts': '5.0.1'
        },
        browserslist: {
          production: ['>0.2%', 'not dead', 'not op_mini all'],
          development: ['last 1 chrome version', 'last 1 firefox version', 'last 1 safari version']
        }
      }, null, 2),
      
      'src/App.js': `import React, { useState, useEffect } from 'react';
import './App.css';

function App() {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Simulate API call
    const fetchData = async () => {
      try {
        setLoading(true);
        // Add your API logic here
        setTimeout(() => {
          setData({ message: 'Hello from React!' });
          setLoading(false);
        }, 1000);
      } catch (error) {
        console.error('Error fetching data:', error);
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  if (loading) {
    return (
      <div className="App">
        <div className="loading">Loading...</div>
      </div>
    );
  }

  return (
    <div className="App">
      <header className="App-header">
        <h1>${appName}</h1>
        <p>Generated based on: "${prompt}"</p>
        {data && <p>{data.message}</p>}
        <button 
          className="btn-primary"
          onClick={() => alert('Button clicked!')}
        >
          Click Me
        </button>
      </header>
    </div>
  );
}

export default App;`,
      
      'src/App.css': `* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.App {
  text-align: center;
  min-height: 100vh;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
}

.App-header {
  padding: 2rem;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
}

.App-header h1 {
  font-size: 3rem;
  margin-bottom: 1rem;
  text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
}

.App-header p {
  font-size: 1.2rem;
  margin-bottom: 2rem;
  opacity: 0.9;
}

.btn-primary {
  background: #4CAF50;
  border: none;
  color: white;
  padding: 12px 24px;
  font-size: 16px;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 4px 6px rgba(0,0,0,0.1);
}

.btn-primary:hover {
  background: #45a049;
  transform: translateY(-2px);
  box-shadow: 0 6px 8px rgba(0,0,0,0.2);
}

.loading {
  font-size: 1.5rem;
  animation: pulse 1.5s ease-in-out infinite;
}

@keyframes pulse {
  0% { opacity: 1; }
  50% { opacity: 0.5; }
  100% { opacity: 1; }
}

@media (max-width: 768px) {
  .App-header h1 {
    font-size: 2rem;
  }
  
  .App-header p {
    font-size: 1rem;
  }
}`,
      
      'src/index.js': `import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);`,
      
      'public/index.html': `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="theme-color" content="#000000" />
  <meta name="description" content="${appName} - A React application generated by DreamBuild" />
  <title>${appName}</title>
</head>
<body>
  <noscript>You need to enable JavaScript to run this app.</noscript>
  <div id="root"></div>
</body>
</html>`
    }
  }

  async generateEnhancedPythonTemplate(prompt, context) {
    console.log('🐍 Generating enhanced Python template for:', prompt)
    
    const appName = prompt.split(' ')[0] || 'PythonApp'
    
    return {
      'app.py': `#!/usr/bin/env python3
"""
${appName} - A Python application generated by DreamBuild
Generated based on: "${prompt}"
"""

from flask import Flask, render_template, request, jsonify
import json
from datetime import datetime

app = Flask(__name__)

# Sample data
data = {
    'users': [],
    'items': [],
    'messages': []
}

@app.route('/')
def index():
    """Main page"""
    return render_template('index.html', 
                         app_name='${appName}',
                         prompt='${prompt}',
                         data=data)

@app.route('/api/data', methods=['GET'])
def get_data():
    """API endpoint to get data"""
    return jsonify({
        'status': 'success',
        'data': data,
        'timestamp': datetime.now().isoformat()
    })

@app.route('/api/data', methods=['POST'])
def add_data():
    """API endpoint to add data"""
    try:
        new_item = request.get_json()
        new_item['id'] = len(data['items']) + 1
        new_item['created_at'] = datetime.now().isoformat()
        data['items'].append(new_item)
        
        return jsonify({
            'status': 'success',
            'message': 'Item added successfully',
            'item': new_item
        })
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': str(e)
        }), 400

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)`,
      
      'requirements.txt': `Flask==2.3.3
Werkzeug==2.3.7
Jinja2==3.1.2
MarkupSafe==2.1.3
itsdangerous==2.1.2
click==8.1.7
blinker==1.6.2`,
      
      'templates/index.html': `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ app_name }}</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: white;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        .header {
            text-align: center;
            margin-bottom: 3rem;
        }
        
        .header h1 {
            font-size: 3rem;
            margin-bottom: 1rem;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .content {
            background: rgba(255,255,255,0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 2rem;
            margin-bottom: 2rem;
        }
        
        .btn {
            background: #4CAF50;
            border: none;
            color: white;
            padding: 12px 24px;
            font-size: 16px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 0.5rem;
        }
        
        .btn:hover {
            background: #45a049;
            transform: translateY(-2px);
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>{{ app_name }}</h1>
            <p>Generated based on: {{ prompt }}</p>
        </div>
        
        <div class="content">
            <h2>Welcome to your Python Flask application!</h2>
            <p>This is a fully functional Flask application with API endpoints and a modern web interface.</p>
            
            <button class="btn" onclick="fetchData()">Test API</button>
            <button class="btn" onclick="addSampleData()">Add Sample Data</button>
        </div>
    </div>
    
    <script>
        async function fetchData() {
            try {
                const response = await fetch('/api/data');
                const data = await response.json();
                alert('Data fetched: ' + JSON.stringify(data, null, 2));
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }
        
        async function addSampleData() {
            try {
                const response = await fetch('/api/data', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        name: 'Sample Item',
                        description: 'This is a sample item added via API'
                    })
                });
                const data = await response.json();
                alert('Sample data added: ' + JSON.stringify(data, null, 2));
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }
    </script>
</body>
</html>`
    }
  }

  async generateEnhancedHTMLTemplate(prompt, context) {
    console.log('🌐 Generating enhanced HTML template for:', prompt)
    
    const appName = prompt.split(' ')[0] || 'WebApp'
    
    return {
      'index.html': `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${appName}</title>
    <link rel="stylesheet" href="styles.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <header class="header">
        <nav class="navbar">
            <div class="nav-brand">
                <h1>${appName}</h1>
            </div>
            <ul class="nav-menu">
                <li><a href="#home" class="nav-link">Home</a></li>
                <li><a href="#about" class="nav-link">About</a></li>
                <li><a href="#contact" class="nav-link">Contact</a></li>
            </ul>
        </nav>
    </header>

    <main>
        <section id="home" class="hero">
            <div class="hero-content">
                <h2>Welcome to ${appName}</h2>
                <p>Generated based on: "${prompt}"</p>
                <p>A modern, responsive web application built with HTML, CSS, and JavaScript</p>
                <button class="cta-button" onclick="scrollToSection('about')">Get Started</button>
            </div>
        </section>

        <section id="about" class="about">
            <div class="container">
                <h2>About Us</h2>
                <div class="about-content">
                    <div class="about-text">
                        <p>This is a fully functional web application generated by DreamBuild. It includes modern design patterns, responsive layout, and interactive features.</p>
                        <ul class="features-list">
                            <li><i class="fas fa-check"></i> Responsive Design</li>
                            <li><i class="fas fa-check"></i> Modern UI/UX</li>
                            <li><i class="fas fa-check"></i> Interactive Elements</li>
                            <li><i class="fas fa-check"></i> Mobile-First Approach</li>
                        </ul>
                    </div>
                </div>
            </div>
        </section>

        <section id="contact" class="contact">
            <div class="container">
                <h2>Contact Us</h2>
                <div class="contact-content">
                    <div class="contact-info">
                        <div class="contact-item">
                            <i class="fas fa-envelope"></i>
                            <span>contact@${appName.toLowerCase()}.com</span>
                        </div>
                        <div class="contact-item">
                            <i class="fas fa-phone"></i>
                            <span>+1 (555) 123-4567</span>
                        </div>
                    </div>
                    <form class="contact-form" onsubmit="handleSubmit(event)">
                        <input type="text" placeholder="Your Name" required>
                        <input type="email" placeholder="Your Email" required>
                        <textarea placeholder="Your Message" rows="5" required></textarea>
                        <button type="submit" class="submit-btn">Send Message</button>
                    </form>
                </div>
            </div>
        </section>
    </main>

    <footer class="footer">
        <div class="container">
            <p>&copy; 2024 ${appName}. All rights reserved. Generated by DreamBuild.</p>
        </div>
    </footer>

    <script src="script.js"></script>
</body>
</html>`,
      
      'styles.css': `/* Reset and Base Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    color: #333;
    overflow-x: hidden;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
}

/* Header Styles */
.header {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    position: fixed;
    top: 0;
    width: 100%;
    z-index: 1000;
    box-shadow: 0 2px 20px rgba(0, 0, 0, 0.1);
}

.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 2rem;
}

.nav-brand h1 {
    color: #667eea;
    font-size: 1.8rem;
    font-weight: 700;
}

.nav-menu {
    display: flex;
    list-style: none;
    gap: 2rem;
}

.nav-link {
    text-decoration: none;
    color: #333;
    font-weight: 500;
    transition: color 0.3s ease;
}

.nav-link:hover {
    color: #667eea;
}

/* Hero Section */
.hero {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    color: white;
}

.hero-content {
    max-width: 800px;
    padding: 2rem;
}

.hero h2 {
    font-size: 3.5rem;
    margin-bottom: 1rem;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
}

.hero p {
    font-size: 1.3rem;
    margin-bottom: 2rem;
    opacity: 0.9;
}

.cta-button {
    background: #4CAF50;
    color: white;
    border: none;
    padding: 15px 30px;
    font-size: 1.1rem;
    border-radius: 50px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
}

.cta-button:hover {
    background: #45a049;
    transform: translateY(-3px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
}

/* About Section */
.about {
    padding: 5rem 0;
    background: #f8f9fa;
}

.about h2 {
    text-align: center;
    font-size: 2.5rem;
    margin-bottom: 3rem;
    color: #333;
}

.about-text p {
    font-size: 1.1rem;
    margin-bottom: 2rem;
    color: #666;
}

.features-list {
    list-style: none;
}

.features-list li {
    display: flex;
    align-items: center;
    margin-bottom: 1rem;
    font-size: 1.1rem;
}

.features-list i {
    color: #4CAF50;
    margin-right: 1rem;
    font-size: 1.2rem;
}

/* Contact Section */
.contact {
    padding: 5rem 0;
    background: white;
}

.contact h2 {
    text-align: center;
    font-size: 2.5rem;
    margin-bottom: 3rem;
    color: #333;
}

.contact-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 3rem;
}

.contact-info {
    display: flex;
    flex-direction: column;
    gap: 2rem;
}

.contact-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    font-size: 1.1rem;
}

.contact-item i {
    color: #667eea;
    font-size: 1.5rem;
    width: 30px;
}

.contact-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.contact-form input,
.contact-form textarea {
    padding: 1rem;
    border: 2px solid #e0e0e0;
    border-radius: 10px;
    font-size: 1rem;
    transition: border-color 0.3s ease;
}

.contact-form input:focus,
.contact-form textarea:focus {
    outline: none;
    border-color: #667eea;
}

.submit-btn {
    background: #667eea;
    color: white;
    border: none;
    padding: 1rem 2rem;
    font-size: 1.1rem;
    border-radius: 10px;
    cursor: pointer;
    transition: background 0.3s ease;
}

.submit-btn:hover {
    background: #5a6fd8;
}

/* Footer */
.footer {
    background: #333;
    color: white;
    text-align: center;
    padding: 2rem 0;
}

/* Responsive Design */
@media (max-width: 768px) {
    .hero h2 {
        font-size: 2.5rem;
    }
    
    .hero p {
        font-size: 1.1rem;
    }
    
    .contact-content {
        grid-template-columns: 1fr;
    }
}`,
      
      'script.js': `// Smooth scrolling for navigation links
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    });
});

// Scroll to section function
function scrollToSection(sectionId) {
    const section = document.getElementById(sectionId);
    if (section) {
        section.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
        });
    }
}

// Handle form submission
function handleSubmit(event) {
    event.preventDefault();
    const formData = new FormData(event.target);
    const data = Object.fromEntries(formData);
    
    // Simulate form submission
    alert('Thank you for your message! We will get back to you soon.');
    event.target.reset();
}

// Initialize page
document.addEventListener('DOMContentLoaded', () => {
    console.log('${appName} loaded successfully!');
    
    // Add any additional initialization code here
    const currentYear = new Date().getFullYear();
    const footer = document.querySelector('.footer p');
    if (footer) {
        footer.textContent = footer.textContent.replace('2024', currentYear);
    }
});`
    }
  }

  async generateEnhancedDefaultTemplate(prompt, context) {
    console.log('🌐 Generating enhanced default template for:', prompt)
    
    const appName = prompt.split(' ')[0] || 'WebApp'
    
    return {
      'index.html': `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${appName}</title>
    <link rel="stylesheet" href="styles.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <header class="header">
        <nav class="navbar">
            <div class="nav-brand">
                <h1>${appName}</h1>
            </div>
            <ul class="nav-menu">
                <li><a href="#home" class="nav-link">Home</a></li>
                <li><a href="#about" class="nav-link">About</a></li>
                <li><a href="#contact" class="nav-link">Contact</a></li>
            </ul>
        </nav>
    </header>

    <main>
        <section id="home" class="hero">
            <div class="hero-content">
                <h2>Welcome to ${appName}</h2>
                <p>Generated based on: "${prompt}"</p>
                <p>A modern, responsive web application built with HTML, CSS, and JavaScript</p>
                <button class="cta-button" onclick="scrollToSection('about')">Get Started</button>
            </div>
        </section>

        <section id="about" class="about">
            <div class="container">
                <h2>About Us</h2>
                <div class="about-content">
                    <div class="about-text">
                        <p>This is a fully functional web application generated by DreamBuild. It includes modern design patterns, responsive layout, and interactive features.</p>
                        <ul class="features-list">
                            <li><i class="fas fa-check"></i> Responsive Design</li>
                            <li><i class="fas fa-check"></i> Modern UI/UX</li>
                            <li><i class="fas fa-check"></i> Interactive Elements</li>
                            <li><i class="fas fa-check"></i> Mobile-First Approach</li>
                        </ul>
                    </div>
                </div>
            </div>
        </section>

        <section id="contact" class="contact">
            <div class="container">
                <h2>Contact Us</h2>
                <div class="contact-content">
                    <div class="contact-info">
                        <div class="contact-item">
                            <i class="fas fa-envelope"></i>
                            <span>contact@${appName.toLowerCase()}.com</span>
                        </div>
                        <div class="contact-item">
                            <i class="fas fa-phone"></i>
                            <span>+1 (555) 123-4567</span>
                        </div>
                    </div>
                    <form class="contact-form" onsubmit="handleSubmit(event)">
                        <input type="text" placeholder="Your Name" required>
                        <input type="email" placeholder="Your Email" required>
                        <textarea placeholder="Your Message" rows="5" required></textarea>
                        <button type="submit" class="submit-btn">Send Message</button>
                    </form>
                </div>
            </div>
        </section>
    </main>

    <footer class="footer">
        <div class="container">
            <p>&copy; 2024 ${appName}. All rights reserved. Generated by DreamBuild.</p>
        </div>
    </footer>

    <script src="script.js"></script>
</body>
</html>`,
      
      'styles.css': `/* Reset and Base Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    color: #333;
    overflow-x: hidden;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
}

/* Header Styles */
.header {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    position: fixed;
    top: 0;
    width: 100%;
    z-index: 1000;
    box-shadow: 0 2px 20px rgba(0, 0, 0, 0.1);
}

.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 2rem;
}

.nav-brand h1 {
    color: #667eea;
    font-size: 1.8rem;
    font-weight: 700;
}

.nav-menu {
    display: flex;
    list-style: none;
    gap: 2rem;
}

.nav-link {
    text-decoration: none;
    color: #333;
    font-weight: 500;
    transition: color 0.3s ease;
}

.nav-link:hover {
    color: #667eea;
}

/* Hero Section */
.hero {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    color: white;
}

.hero-content {
    max-width: 800px;
    padding: 2rem;
}

.hero h2 {
    font-size: 3.5rem;
    margin-bottom: 1rem;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
}

.hero p {
    font-size: 1.3rem;
    margin-bottom: 2rem;
    opacity: 0.9;
}

.cta-button {
    background: #4CAF50;
    color: white;
    border: none;
    padding: 15px 30px;
    font-size: 1.1rem;
    border-radius: 50px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
}

.cta-button:hover {
    background: #45a049;
    transform: translateY(-3px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
}

/* About Section */
.about {
    padding: 5rem 0;
    background: #f8f9fa;
}

.about h2 {
    text-align: center;
    font-size: 2.5rem;
    margin-bottom: 3rem;
    color: #333;
}

.about-text p {
    font-size: 1.1rem;
    margin-bottom: 2rem;
    color: #666;
}

.features-list {
    list-style: none;
}

.features-list li {
    display: flex;
    align-items: center;
    margin-bottom: 1rem;
    font-size: 1.1rem;
}

.features-list i {
    color: #4CAF50;
    margin-right: 1rem;
    font-size: 1.2rem;
}

/* Contact Section */
.contact {
    padding: 5rem 0;
    background: white;
}

.contact h2 {
    text-align: center;
    font-size: 2.5rem;
    margin-bottom: 3rem;
    color: #333;
}

.contact-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 3rem;
}

.contact-info {
    display: flex;
    flex-direction: column;
    gap: 2rem;
}

.contact-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    font-size: 1.1rem;
}

.contact-item i {
    color: #667eea;
    font-size: 1.5rem;
    width: 30px;
}

.contact-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.contact-form input,
.contact-form textarea {
    padding: 1rem;
    border: 2px solid #e0e0e0;
    border-radius: 10px;
    font-size: 1rem;
    transition: border-color 0.3s ease;
}

.contact-form input:focus,
.contact-form textarea:focus {
    outline: none;
    border-color: #667eea;
}

.submit-btn {
    background: #667eea;
    color: white;
    border: none;
    padding: 1rem 2rem;
    font-size: 1.1rem;
    border-radius: 10px;
    cursor: pointer;
    transition: background 0.3s ease;
}

.submit-btn:hover {
    background: #5a6fd8;
}

/* Footer */
.footer {
    background: #333;
    color: white;
    text-align: center;
    padding: 2rem 0;
}

/* Responsive Design */
@media (max-width: 768px) {
    .hero h2 {
        font-size: 2.5rem;
    }
    
    .hero p {
        font-size: 1.1rem;
    }
    
    .contact-content {
        grid-template-columns: 1fr;
    }
}`,
      
      'script.js': `// Smooth scrolling for navigation links
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    });
});

// Scroll to section function
function scrollToSection(sectionId) {
    const section = document.getElementById(sectionId);
    if (section) {
        section.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
        });
    }
}

// Handle form submission
function handleSubmit(event) {
    event.preventDefault();
    const formData = new FormData(event.target);
    const data = Object.fromEntries(formData);
    
    // Simulate form submission
    alert('Thank you for your message! We will get back to you soon.');
    event.target.reset();
}

// Initialize page
document.addEventListener('DOMContentLoaded', () => {
    console.log('${appName} loaded successfully!');
    
    // Add any additional initialization code here
    const currentYear = new Date().getFullYear();
    const footer = document.querySelector('.footer p');
    if (footer) {
        footer.textContent = footer.textContent.replace('2024', currentYear);
    }
});`
    }
  }

  // Performance optimization methods
  generateCacheKey(prompt, context = {}) {
    const promptString = typeof prompt === 'string' ? prompt : JSON.stringify(prompt)
    const contextString = JSON.stringify(context)
    return `${promptString}_${contextString}`.replace(/[^a-zA-Z0-9]/g, '_')
  }

  getCachedResponse(prompt, context = {}) {
    const cacheKey = this.generateCacheKey(prompt, context)
    const cached = this.responseCache.get(cacheKey)
    
    if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
      console.log('🚀 Cache hit for prompt:', prompt.substring(0, 50) + '...')
      return cached.response
    }
    
    if (cached) {
      this.responseCache.delete(cacheKey)
    }
    
    return null
  }

  setCachedResponse(prompt, context = {}, response) {
    const cacheKey = this.generateCacheKey(prompt, context)
    
    // Clean up old cache entries if we're at the limit
    if (this.responseCache.size >= this.maxCacheSize) {
      const oldestKey = this.responseCache.keys().next().value
      this.responseCache.delete(oldestKey)
    }
    
    this.responseCache.set(cacheKey, {
      response: response,
      timestamp: Date.now()
    })
    
    console.log('💾 Cached response for prompt:', prompt.substring(0, 50) + '...')
  }

  clearCache() {
    this.responseCache.clear()
    console.log('🗑️ Cache cleared')
  }

  getCacheStats() {
    return {
      size: this.responseCache.size,
      maxSize: this.maxCacheSize,
      timeout: this.cacheTimeout
    }
  }
}

// Export singleton instance
export default new LocalAIService()
