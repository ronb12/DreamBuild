// Generated for project: Untitled Project
// Todo App with 5 Features - Generated by DreamBuild AI
// Product of Bradley Virtual Solutions, LLC
console.log('🚀 Initializing Feature-Rich Todo App with 5 features!')

// ============================================================================
// TODO MANAGER - Handles all todo operations with full feature support
// ============================================================================
class TodoManager {
  constructor() {
    this.todos = this.loadTodos()
    this.currentFilter = 'all'
    this.currentSort = 'date'
    this.searchQuery = ''
    console.log('✅ TodoManager initialized with', this.todos.length, 'todos')
  }

  addTodo(todoData) {
    const todo = {
      id: Date.now(),
      text: todoData.text,
      completed: false,
      createdAt: new Date().toISOString()
    }
    
    // Add optional feature properties
    
    
    
    
    
    
    this.todos.push(todo)
    this.saveTodos()
    console.log('✅ Todo added:', todo)
    return todo
  }

  deleteTodo(id) {
    this.todos = this.todos.filter(t => t.id !== id)
    this.saveTodos()
    console.log('🗑️ Todo deleted:', id)
  }

  toggleTodo(id) {
    const todo = this.todos.find(t => t.id === id)
    if (todo) {
      todo.completed = !todo.completed
      this.saveTodos()
      console.log('✅ Todo toggled:', id, 'completed:', todo.completed)
    }
  }

  getTodos() {
    let filtered = [...this.todos]
    
    // Apply search filter
    
    if (this.searchQuery) {
      filtered = filtered.filter(todo => 
        todo.text.toLowerCase().includes(this.searchQuery.toLowerCase())
      )
    }
    
    
    // Apply status filter
    
    if (this.currentFilter === 'Active') {
      filtered = filtered.filter(t => !t.completed)
    } else if (this.currentFilter === 'Completed') {
      filtered = filtered.filter(t => t.completed)
    }
    
    
    // Apply sort
    
    if (this.currentSort === 'Sort by Priority' && filtered[0]?.priority) {
      const priorityOrder = { high: 0, medium: 1, low: 2 }
      filtered.sort((a, b) => priorityOrder[a.priority] - priorityOrder[b.priority])
    } else if (this.currentSort === 'Sort by Name') {
      filtered.sort((a, b) => a.text.localeCompare(b.text))
    }
    
    
    return filtered
  }

  
  saveTodos() {
    try {
      localStorage.setItem('dreambuild-todos', JSON.stringify(this.todos))
      console.log('💾 Todos saved to localStorage')
    } catch (error) {
      console.error('Failed to save todos:', error)
    }
  }

  loadTodos() {
    try {
      const saved = localStorage.getItem('dreambuild-todos')
      const todos = saved ? JSON.parse(saved) : []
      console.log('📂 Loaded', todos.length, 'todos from localStorage')
      return todos
    } catch (error) {
      console.error('Failed to load todos:', error)
      return []
    }
  }
  

  getStats() {
    return {
      total: this.todos.length,
      active: this.todos.filter(t => !t.completed).length,
      completed: this.todos.filter(t => t.completed).length
    }
  }
}

// ============================================================================
// UI MANAGER - Handles all rendering and interactions
// ============================================================================
class TodoUI {
  constructor(todoManager) {
    this.todoManager = todoManager
    this.initializeElements()
    this.bindEvents()
    this.render()
  }

  initializeElements() {
    this.form = document.getElementById('add-todo-form')
    this.todoInput = document.getElementById('todo-input')
    this.todosContainer = document.getElementById('todos-container')
    
    // Feature-specific elements (only if features exist)
    
    
    
    
    
    this.searchInput = document.getElementById('search-input');
    this.filterSelect = document.getElementById('filter-select');
    this.sortSelect = document.getElementById('sort-select');
    this.themeToggle = document.getElementById('theme-toggle');
    
    
    console.log('✅ UI elements initialized:', {
      form: !!this.form,
      todoInput: !!this.todoInput,
      todosContainer: !!this.todosContainer
    })
  }

  bindEvents() {
    // Form submission with retry logic
    if (!this.form) {
      console.warn('⚠️ Form not found, retrying in 100ms...')
      setTimeout(() => {
        this.form = document.getElementById('add-todo-form')
        if (this.form) {
          this.bindEvents()
        }
      }, 100)
      return
    }
    
    this.form.addEventListener('submit', (e) => {
      e.preventDefault()
      this.handleAddTodo()
    })
    console.log('✅ Form submit event bound')

    
    // Search
    if (this.searchInput) {
      this.searchInput.addEventListener('input', (e) => {
        this.todoManager.searchQuery = e.target.value
        this.render()
      })
    }
    

    
    // Filter
    if (this.filterSelect) {
      this.filterSelect.addEventListener('change', (e) => {
        this.todoManager.currentFilter = e.target.value
        this.render()
      })
    }
    

    
    // Sort
    if (this.sortSelect) {
      this.sortSelect.addEventListener('change', (e) => {
        this.todoManager.currentSort = e.target.value
        this.render()
      })
    }
    

    
    // Dark mode toggle
    if (this.themeToggle) {
      this.themeToggle.addEventListener('click', () => {
        document.body.classList.toggle('dark-mode')
        this.themeToggle.textContent = document.body.classList.contains('dark-mode') 
          ? '☀️ Light Mode' 
          : '🌙 Dark Mode'
      })
    }
    

    

    console.log('✅ Events bound')
  }

  handleAddTodo() {
    const text = this.todoInput.value.trim()
    if (!text) return

    const todoData = { text }
    
    // Add optional feature data
    
    
    
    
    

    this.todoManager.addTodo(todoData)
    this.form.reset()
    this.render()
    this.showNotification('Todo added! ✅')
  }

  render() {
    const todos = this.todoManager.getTodos()
    
    if (todos.length === 0) {
      this.todosContainer.innerHTML = '<p style="text-align: center; color: #64748b; padding: 3rem;">No todos yet. Add one above! 📝</p>'
    } else {
      this.todosContainer.innerHTML = todos.map(todo => this.renderTodo(todo)).join('')
    }

    this.updateStats()
  }

  renderTodo(todo) {
    const priorityColors = { high: '#ef4444', medium: '#f59e0b', low: '#10b981' }
    const priorityIcons = { high: '🔴', medium: '🟡', low: '🟢' }
    
    let html = '<div class="todo-item" style="border-left: 4px solid ' + (priorityColors[todo.priority] || '#64748b') + '; padding: 1rem; margin-bottom: 1rem; background: #f8fafc; border-radius: 8px;">'
    html += '<div style="display: flex; align-items: start; gap: 1rem;">'
    html += '<input type="checkbox" ' + (todo.completed ? 'checked' : '') + ' onchange="todoApp.ui.handleToggle(' + todo.id + ')" style="margin-top: 0.25rem; width: 20px; height: 20px; cursor: pointer;" />'
    html += '<div style="flex: 1;">'
    html += '<div style="display: flex; justify-content: space-between; align-items: start;">'
    html += '<h4 style="margin: 0; ' + (todo.completed ? 'text-decoration: line-through; color: #94a3b8;' : 'color: #1e293b;') + '">' + todo.text + '</h4>'
    html += '<button onclick="todoApp.ui.handleDelete(' + todo.id + ')" class="btn btn-secondary" style="padding: 0.25rem 0.75rem; font-size: 0.875rem;">🗑️</button>'
    html += '</div>'
    
    
    
    
    
    
    
    
    
    
    
    html += '</div></div></div>'
    return html
  }

  handleToggle(id) {
    this.todoManager.toggleTodo(id)
    this.render()
  }

  handleDelete(id) {
    this.todoManager.deleteTodo(id)
    this.render()
    this.showNotification('Todo deleted! 🗑️')
  }

  

  updateStats() {
    const stats = this.todoManager.getStats()
    document.getElementById('total-count').textContent = stats.total
    document.getElementById('active-count').textContent = stats.active
    document.getElementById('completed-count').textContent = stats.completed
  }

  showNotification(message) {
    const notification = document.createElement('div')
    notification.style.cssText = 'position: fixed; top: 20px; right: 20px; background: #10b981; color: white; padding: 1rem 1.5rem; border-radius: 8px; box-shadow: 0 10px 25px rgba(0,0,0,0.1); z-index: 1000; animation: fadeIn 0.3s;'
    notification.textContent = message
    document.body.appendChild(notification)
    setTimeout(() => {
      notification.style.opacity = '0'
      notification.style.transform = 'translateY(-20px)'
      notification.style.transition = 'all 0.3s'
      setTimeout(() => notification.remove(), 300)
    }, 2000)
  }
}

// ============================================================================
// INITIALIZE TODO APP
// ============================================================================
let todoApp = null
let initAttempts = 0

function initializeApp() {
  initAttempts++
  console.log(`🚀 [Attempt ${initAttempts}] Starting Todo App with 5 features...`)
  console.log('📊 Document state:', document.readyState)
  
  // Ensure form exists before initializing
  const form = document.getElementById('add-todo-form')
  const input = document.getElementById('todo-input')
  const container = document.getElementById('todos-container')
  
  console.log('🔍 Elements check:', {
    form: !!form,
    input: !!input,
    container: !!container
  })
  
  if (!form || !input || !container) {
    if (initAttempts < 20) {
      console.warn(`⚠️  Elements not ready (attempt ${initAttempts}/20), retrying in 200ms...`)
      setTimeout(initializeApp, 200)
      return
    } else {
      console.error('❌ Failed to initialize after 20 attempts - elements not found!')
      return
    }
  }
  
  console.log('✅ All elements found, initializing managers...')
  
  try {
    const todoManager = new TodoManager()
    const todoUI = new TodoUI(todoManager)
    
    todoApp = { manager: todoManager, ui: todoUI }
    window.todoApp = todoApp
    
    console.log('✅ Todo App fully initialized!')
    console.log('📋 Features active:', ["localStorage","darkMode","search","filter","sort"])
    console.log('🎯 TodoApp available globally as window.todoApp')
    
    todoUI.showNotification('Todo app ready! ✅')
  } catch (error) {
    console.error('❌ Error during initialization:', error)
    console.error('Stack:', error.stack)
  }
}

// Auto-initialize with DOM check
console.log('📜 Todo app script loaded! Current state:', document.readyState)

if (document.readyState === 'loading') {
  console.log('⏳ DOM still loading, waiting for DOMContentLoaded...')
  document.addEventListener('DOMContentLoaded', () => {
    console.log('✅ DOMContentLoaded fired!')
    initializeApp()
  })
} else if (document.readyState === 'interactive' || document.readyState === 'complete') {
  console.log('✅ DOM already loaded, initializing with delay...')
  setTimeout(initializeApp, 100)
} else {
  console.log('🚀 Initializing immediately...')
  initializeApp()
}


// Todo App Initialization - Generated by DreamBuild Built-in AI

// Initialize Todo App when DOM is ready
function initializeApp() {
  console.log('🚀 Initializing Todo App...')
  
  try {
    // Create and render components
    const todoList = new TodoList()
    const addTodo = new AddTodo(todoList)
    
    console.log('✅ Todo App initialized successfully!')
  } catch (error) {
    console.error('❌ Failed to initialize Todo App:', error)
  }
}

// Auto-initialize when ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initializeApp)
} else {
  initializeApp()
}


// Todo App Initializer - Generated by DreamBuild Built-in AI

// Global instances
let todoList = null
let addTodo = null

// Initialize Todo App when DOM is ready
function initializeApp() {
  console.log('🚀 Initializing Todo App...')
  
  try {
    // Create TodoList instance first
    todoList = new TodoList()
    console.log('✅ TodoList created:', todoList)
    
    // Create AddTodo with reference to todoList
    addTodo = new AddTodo(todoList)
    console.log('✅ AddTodo created:', addTodo)
    
    // Render both components
    addTodo.render()
    todoList.render()
    
    // Re-bind events after rendering
    setTimeout(() => {
      addTodo.bindEvents()
      todoList.bindEvents()
      console.log('✅ Events rebound after render')
    }, 100)
    
    console.log('✅ Todo App initialized successfully!')
    
    // Make instances globally available for debugging
    window.todoList = todoList
    window.addTodo = addTodo
    
  } catch (error) {
    console.error('❌ Failed to initialize Todo App:', error)
  }
}

// Auto-initialize when ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initializeApp)
} else {
  initializeApp()
}
