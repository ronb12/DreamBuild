const puppeteer = require('puppeteer');

async function verifyGameCreationMethod() {
  console.log('🔍 Verifying How the Game Was Actually Created...');
  
  const browser = await puppeteer.launch({ 
    headless: false,
    defaultViewport: { width: 1920, height: 1080 },
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  
  try {
    const page = await browser.newPage();
    
    // Navigate to DreamBuild AI Builder to test actual AI generation
    console.log('📱 Testing DreamBuild AI Builder Game Generation...');
    await page.goto('http://localhost:3001/ai-builder', { 
      waitUntil: 'networkidle2',
      timeout: 30000 
    });
    
    // Wait for page to load
    await new Promise(resolve => setTimeout(resolve, 8000));
    
    console.log('\n🎯 TESTING ACTUAL DREAMBUILD AI GENERATION...');
    console.log('============================================');
    
    // Enter a game creation prompt in the AI Builder
    const gamePrompt = `Create a simple platformer game where a character can move left and right with arrow keys and jump with spacebar. Include basic physics and a ground platform.`;
    
    try {
      const textarea = await page.$('textarea');
      if (textarea) {
        await textarea.click();
        await textarea.evaluate(el => el.value = '');
        await textarea.type(gamePrompt);
        console.log('✅ Game prompt entered in AI Builder');
        
        // Wait for AI response
        await new Promise(resolve => setTimeout(resolve, 10000));
        
        // Check what was actually generated by the AI
        const aiGeneratedContent = await page.evaluate(() => {
          const bodyText = document.body.textContent;
          const hasGameCode = bodyText.includes('game') || bodyText.includes('canvas') || bodyText.includes('character');
          const hasActualCode = bodyText.includes('function') || bodyText.includes('const') || bodyText.includes('let');
          const hasHTML = bodyText.includes('<!DOCTYPE html>') || bodyText.includes('<html>');
          
          // Look for the actual generated content
          const codeEditor = document.querySelector('[data-testid="code-editor"]');
          const aiResponse = document.querySelector('.ai-response, .message-content, .chat-message');
          
          return {
            hasGameCode,
            hasActualCode,
            hasHTML,
            hasCodeEditor: !!codeEditor,
            hasAIResponse: !!aiResponse,
            codeEditorContent: codeEditor ? codeEditor.textContent.substring(0, 500) : '',
            aiResponseContent: aiResponse ? aiResponse.textContent.substring(0, 500) : '',
            fullBodyText: bodyText.substring(0, 1000)
          };
        });
        
        console.log('\n🔍 AI GENERATION ANALYSIS:');
        console.log(`Game Code Generated: ${aiGeneratedContent.hasGameCode ? '✅ YES' : '❌ NO'}`);
        console.log(`Actual Code Generated: ${aiGeneratedContent.hasActualCode ? '✅ YES' : '❌ NO'}`);
        console.log(`HTML Generated: ${aiGeneratedContent.hasHTML ? '✅ YES' : '❌ NO'}`);
        console.log(`Code Editor Present: ${aiGeneratedContent.hasCodeEditor ? '✅ YES' : '❌ NO'}`);
        console.log(`AI Response Present: ${aiGeneratedContent.hasAIResponse ? '✅ YES' : '❌ NO'}`);
        
        if (aiGeneratedContent.codeEditorContent) {
          console.log('\n📝 Code Editor Content:');
          console.log(aiGeneratedContent.codeEditorContent);
        }
        
        if (aiGeneratedContent.aiResponseContent) {
          console.log('\n🤖 AI Response Content:');
          console.log(aiGeneratedContent.aiResponseContent);
        }
        
        // Take screenshot
        await page.screenshot({ 
          path: 'dreambuild-ai-generation-test.png',
          fullPage: true 
        });
        
        console.log('\n📸 Screenshot saved: dreambuild-ai-generation-test.png');
        
        // Final assessment
        const aiGenerationScore = [
          aiGeneratedContent.hasGameCode,
          aiGeneratedContent.hasActualCode,
          aiGeneratedContent.hasCodeEditor,
          aiGeneratedContent.codeEditorContent.length > 100
        ].filter(Boolean).length;
        
        const aiScore = Math.round((aiGenerationScore / 4) * 100);
        
        console.log('\n🏆 DREAMBUILD AI GENERATION ASSESSMENT:');
        console.log('=====================================');
        console.log(`AI Generation Score: ${aiGenerationScore}/4 (${aiScore}%)`);
        
        if (aiScore >= 75) {
          console.log('✅ DreamBuild AI successfully generated game code!');
        } else if (aiScore >= 50) {
          console.log('⚠️ DreamBuild AI partially generated content');
        } else {
          console.log('❌ DreamBuild AI did not generate substantial game code');
        }
        
        console.log('\n📋 HONEST ASSESSMENT:');
        console.log('====================');
        console.log('The Coin Collector game in the gallery was:');
        console.log('• ✅ Created by AI assistant (me) writing code directly');
        console.log('• ✅ Integrated into DreamBuild\'s gallery system');
        console.log('• ✅ Made accessible through DreamBuild\'s interface');
        console.log('• ❌ NOT generated by DreamBuild\'s AI Builder interface');
        
        console.log('\n🎯 TRUTH ABOUT THE GAME:');
        console.log('========================');
        console.log('1. The game code was written by the AI assistant (me)');
        console.log('2. It was saved as public/coin-collector-game.html');
        console.log('3. It was added to the Examples gallery in src/pages/Examples.jsx');
        console.log('4. It is accessible through DreamBuild\'s interface');
        console.log('5. But it was NOT generated by DreamBuild\'s AI Builder');
        
        return {
          aiGenerated: aiScore >= 75,
          aiScore,
          gameCreatedBy: 'AI Assistant (direct code writing)',
          integratedIntoDreamBuild: true,
          accessibleThroughDreamBuild: true
        };
        
      } else {
        console.log('❌ Could not find AI prompt input');
        return { error: 'AI input not found' };
      }
      
    } catch (error) {
      console.log(`❌ Error testing AI generation: ${error.message}`);
      return { error: error.message };
    }
    
  } catch (error) {
    console.error('❌ Verification failed:', error);
    return { error: error.message };
  } finally {
    await browser.close();
  }
}

verifyGameCreationMethod().then(result => {
  if (result.error) {
    console.error('Verification failed:', result.error);
  } else {
    console.log('\n🎉 Game Creation Method Verification Completed!');
    console.log(`DreamBuild AI Generation Score: ${result.aiScore}%`);
    console.log(`Game Created By: ${result.gameCreatedBy}`);
    console.log(`Integrated Into DreamBuild: ${result.integratedIntoDreamBuild ? 'YES' : 'NO'}`);
    console.log(`Accessible Through DreamBuild: ${result.accessibleThroughDreamBuild ? 'YES' : 'NO'}`);
  }
}).catch(console.error);

